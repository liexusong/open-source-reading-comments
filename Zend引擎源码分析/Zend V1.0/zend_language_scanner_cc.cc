#define yyFlexLexer zendFlexLexer

/* A Lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /repository/Zend/flex.skl,v 1.20 2000/12/18 16:11:56 andi Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#if HAVE_UNISTD_H
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 143
#define YY_END_OF_BUFFER 144
static yyconst short int yy_accept[1335] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      144,   96,   96,  142,  105,   84,  119,  106,   84,   84,
       84,  122,   84,   84,   84,   84,   84,   84,   84,   90,
       90,   84,   84,   84,   84,   84,   84,  103,  121,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,   85,   84,
       87,  124,  139,  129,  124,   92,   92,  129,  142,  104,
      126,  129,  125,  141,  142,  127,  142,  140,  138,  124,
      142,  104,   33,   32,   89,   88,  112,  114,  108,  109,

      109,  107,  107,  107,   96,    0,   96,   99,   97,   96,
      105,   63,    0,  117,    0,  102,   71,  116,   78,   74,
        0,  118,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   68,   58,   66,   59,   67,   31,   93,
       70,  111,  106,   69,   93,   90,    0,    0,   34,    0,
       82,   64,   63,   62,   55,   65,   83,  115,   76,  103,
      103,  103,  103,   20,  103,  103,  103,  103,  103,  103,
      103,   13,  103,  103,  103,  103,  103,  103,  103,  103,
      103,    7,  103,  103,  103,  103,  103,   79,  103,  103,
      103,  103,  103,  103,  103,  103,  103,   75,   77,  124,

      128,   86,   31,   92,    0,  137,  133,  135,  137,  104,
      126,  130,  125,    0,  131,  132,  127,  134,  138,  124,
      123,  123,  104,    0,   32,   88,  112,  113,  108,  109,
      110,   96,    0,   98,    0,    0,   61,  102,  116,  116,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
        0,   93,   91,    0,    0,   72,   60,   73,  115,  115,
      103,  103,   80,  103,  103,  103,  103,  103,  103,  103,
      103,    2,  103,  103,  103,  103,  103,  103,  103,   14,
      103,  103,  103,  103,  103,   35,  103,  103,  103,  103,
      103,  103,  103,   49,   36,  103,   81,   92,  135,  136,

       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  103,  103,  103,  103,
       23,  103,  103,  103,  103,  103,  103,   27,   10,  103,
      103,  103,  103,  103,  103,   44,    1,  103,  103,  103,
      103,  103,  103,   56,  103,  103,  103,  103,  103,  103,
      103,  103,  135,  136,   96,    0,    0,    0,    0,    0,
        0,    0,    0,   37,    0,    0,    0,    0,    0,    0,
      120,  120,    0,  103,  103,   57,   25,  103,   29,    5,
      103,  103,  103,  103,   52,  103,  103,    9,  103,  103,
      103,  103,  103,  103,  103,   51,  103,   28,  103,  103,

      103,  103,   54,   11,   96,    0,  100,  100,    0,    0,
        0,    0,   42,    0,    0,    0,    0,    0,   38,    0,
        0,    0,  103,  103,  103,  103,  103,  103,    8,  103,
       15,  103,  103,  103,  103,  103,   50,  103,  103,  103,
        6,   53,   21,   96,    0,    0,    0,    0,   40,    0,
        0,    0,    0,    0,   43,    0,  103,  103,  103,  103,
       18,   24,  103,  103,  103,  103,   30,   16,  103,   45,
      103,   47,   96,    0,    0,    0,    0,    0,    0,   41,
        0,   39,    0,   95,   94,  103,   26,  103,  103,  103,
       12,    4,  103,  103,  103,   96,    0,    0,    0,    0,

      103,  103,   22,  103,  103,  103,   96,    0,    0,    0,
       19,   17,  103,  103,  103,   96,    0,    0,    0,  103,
      103,  103,   96,    0,    0,    0,   46,    3,   48,   96,
        0,    0,    0,   96,    0,    0,    0,   96,    0,    0,
        0,   96,    0,    0,    0,   96,    0,    0,    0,    0,
       96,    0,  101,    0,    0,    0,    0,   96,    0,  101,
      101,    0,    0,    0,   96,    0,    0,    0,    0,   96,
        0,    0,    0,    0,   97,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,

        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,   96,    0,   96,    0,   96,    0,   96,
        0,   96,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   16,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       29,   30,   29,   31,   32,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   16,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    2,    3,    3,    4,    1,    4,    5,    6,    4,
        7,    4,    4,    8,    4,    4,    4,    4,    4,    9,
        9,    9,    4,   10,   11,    4,    6,    6,    1,    1,
        4,   12,    1,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    1,
        4,    1
    } ;

static yyconst short int yy_base[1755] =
    {   0,
     7894, 7893,    0,    0,   62,    0,  114,  115,  121,  122,
      123,  151,  210,    0,  272,    0, 7903, 7902,  132,  139,
     7915, 7889,  121, 7920,  129, 7887,  131, 7920,    0,  112,
      137,  135,  333, 7920, 7886,  143,  151,  150,  322,  322,
      331, 7888,  320,  148,  153, 7883, 7883, 7876, 7920,  303,
     7856,  332,  340,  347,  308, 7861,    0,  351, 7863, 7866,
      312, 7852, 7864,  305,  312, 7867, 7859, 7851, 7920,  312,
     7920,    0, 7920,  404, 7871,  447,  375, 7920,  464,    0,
     7864, 7888, 7865, 7920,  460, 7888,  453, 7920,  466,  469,
      458,  479, 7920,    0, 7920,    0,    0, 7874,    0, 7920,

     7889, 7864, 7920, 7863, 7864,  467, 7863, 7861,  350, 7850,
      485, 7859,  134, 7920,  383,    0, 7920,  397, 7920, 7920,
      470, 7920, 7881,    0, 7832, 7834, 7833, 7835, 7832, 7843,
     7839, 7823, 7828, 7920, 7920, 7920, 7920, 7920, 7920,  476,
     7920, 7920, 7920, 7920,  485,  491,  505,  496, 7920, 7822,
      468, 7920, 7920, 7847, 7920, 7920, 7846,  533, 7920,    0,
      499, 7834, 7819,    0, 7831, 7816, 7813, 7832, 7818,  503,
     7826,    0, 7822, 7810, 7812, 7823, 7825,  498, 7807, 7810,
     7808,    0, 7819, 7802, 7801, 7796, 7814,    0, 7808,  493,
     7815, 7806, 7795, 7808, 7794, 7802, 7792, 7920, 7920,    0,

     7920, 7920,    0,  527,  532, 7920, 7920,  535,  538,    0,
     7809, 7920, 7811, 7810, 7920, 7920, 7833, 7920,  551,  572,
     7920, 7835,  561,  576,    0,    0,    0, 7920,    0, 7920,
     7920, 7812,  572, 7920, 7795, 7784, 7920,    0, 7920, 7831,
     7782, 7784, 7777, 7782, 7776, 7785, 7793, 7775, 7773,  566,
      569,  572,  581, 7788, 7821, 7920, 7920, 7920, 7920, 7819,
     7779, 7778,    0, 7785, 7784, 7779, 7769, 7763,  543, 7769,
     7779,    0, 7764, 7773, 7757,  569, 7764, 7755, 7769, 7768,
     7769, 7769, 7758, 7764, 7748,    0, 7768, 7752, 7744, 7743,
     7743, 7742, 7756,    0,    0, 7748,    0,  592,  578,  612,

     7767,  613, 7742, 7748, 7755, 7743, 7752, 7752,  640, 7747,
     7739, 7741, 7744, 7730, 7778,  606, 7734, 7731, 7719, 7732,
        0, 7739, 7722, 7720, 7730, 7737, 7716,    0, 7727, 7710,
     7729, 7718, 7726, 7708, 7722,    0,    0, 7715, 7727, 7707,
     2984, 2963, 2962,    0, 2975, 2960, 2970, 2960, 2954, 2959,
     2941, 2955, 7920, 7920, 2967,  627,  641, 2942, 2932,  654,
     2944, 2935,  548, 7920, 2933, 2936,  655, 2905, 2896, 2900,
     7920, 2930,  636, 2894, 2891,    0,    0, 2875,    0,    0,
     2878, 2871, 2876, 2881,    0, 2883, 2867,    0, 2869, 2861,
     2865, 2850, 2840, 2832, 2839,    0, 2801,    0, 2798, 2729,

     2739, 2733,    0,    0, 2748,  649, 7920, 2769, 2717, 2716,
      657,  658, 7920, 2734, 2727, 2726, 2710,  659, 7920, 2722,
      662, 2712, 2728, 2727, 2716, 2702, 2717, 2699,    0, 2703,
     2708, 2688, 2693, 2684, 2688, 2678,    0, 2679, 2669, 2677,
        0,    0,    0, 2687,  657, 2660,  684,  667, 7920, 2654,
     2639,  681,  682,  687, 7920, 2630, 2649, 2648, 2631, 2640,
        0,    0, 2634, 2624, 2617, 2612,    0,    0, 2602, 2614,
     2600, 2603, 2607,  682, 2597,  694,  691,  700,  701, 7920,
      703, 7920,  715,    0,    0, 2574,    0, 2559, 2567, 2560,
        0,    0, 2552, 2545, 2543, 2563,  697, 2542, 2539,  724,

     2531, 2525,    0, 2508, 2510, 2498, 2518,  712, 2497, 2493,
        0,    0, 2494, 2481, 2487, 2495,  720, 2486, 2471, 2470,
     2451, 2455, 2461,  722, 2426, 2424,    0,    0,    0, 2450,
      727, 2438, 2429, 2436,  729, 2409, 2410, 2424,  734, 2391,
     2402, 2413,  735, 2403,  763, 2403,  752, 2392,  766,  791,
     2393,  773,  659,  803, 2364, 2357, 2362, 2376,  775, 7920,
     2389, 2342, 2340, 2331, 2345,  787, 2320, 2311,  814, 2333,
      801, 2349, 2341,  817, 7920, 2326,  821, 2323,  822, 2313,
      823, 2308,  829, 2301,  833, 2298,  834, 2296,  851, 2287,
      855, 2278,  859, 2275,  863, 2268,  868, 2265,  869, 2264,

      873, 2255,  880, 2253,  881, 2250,  891, 2246,  901, 2243,
      903, 2222,  909, 2221,  913, 2220,  914, 2218,  921, 2217,
      926, 2216,  931, 2207,  935, 2206,  939, 2195,  943, 2188,
      949, 2185,  960, 2184,  961, 2175,  971, 2173,  972, 2170,
      981, 2163,  983, 2158,  989, 2155,  993, 2141,  994, 2140,
     1001, 2138, 1006, 2137, 1011, 2136, 1019, 2127, 1023, 2126,
     1029, 2115, 1031, 2108, 1040, 2105, 1041, 2096, 1051, 2095,
     1052, 2093, 1061, 2090, 1063, 2083, 1069, 2078, 1073, 2060,
     1081, 2057, 1086, 2050, 1091, 2048, 1098, 2047, 1099, 2046,
     1103, 2045, 1109, 2035, 1111, 2028, 1120, 2025, 1121, 2016,

     1131, 2013, 1132, 2004, 1143, 2003, 1149, 2002, 1153, 1999,
     1157, 1998, 1161, 1988, 1166, 1977, 1171, 1970, 1178, 1968,
     1179, 1967, 1183, 1966, 1189, 1965, 1191, 1955, 1201, 1945,
     1211, 1940, 1212, 1937, 1219, 1936, 1223, 1933, 1224, 1923,
     1229, 1922, 1233, 1919, 1237, 1918, 1241, 1908, 1258, 1897,
     1259, 1890, 1263, 1888, 1269, 1887, 1270, 1885, 1271, 1878,
     1281, 1875, 1291, 1865, 1292, 1860, 1299, 1856, 1303, 1853,
     1304, 1842, 1309, 1839, 1317, 1832, 1321, 1830, 1329, 1828,
     1338, 1827, 1339, 1817, 1343, 1816, 1349, 1810, 1350, 1807,
     1351, 1805, 1361, 1798, 1371, 1795, 1379, 1785, 1383, 1780,

     1384, 1773, 1389, 1768, 1391, 1765, 1396, 1762, 1397, 1759,
     1401, 1750, 1409, 1748, 1419, 1747, 1429, 1737, 1430, 1736,
     1431, 1730, 1437, 1727, 1441, 1725, 1442, 1718, 1451, 1715,
     1459, 1706, 1463, 1705, 1471, 1700, 1476, 1693, 1477, 1690,
     1481, 1688, 1488, 1679, 1489, 1670, 1499, 1668, 1509, 1667,
     1510, 1657, 1511, 1656, 1517, 1647, 1521, 1645, 1522, 1642,
     1539, 1639, 1543, 1638, 1547, 1635, 1551, 1625, 1556, 1620,
     1557, 1613, 1561, 1610, 1568, 1608, 1569, 1599, 1579, 1590,
     1589, 1587, 1591, 1580, 1597, 1577, 1601, 1576, 1602, 1567,
     1609, 1565, 1614, 1562, 1619, 1558, 1623, 1555, 1627, 1534,

     1631, 1533, 1637, 1532, 1648, 1530, 1649, 1529, 1659, 1528,
     1660, 1519, 1669, 1518, 1671, 1507, 1677, 1500, 1681, 1497,
     1682, 1496, 1689, 1487, 1694, 1485, 1699, 1482, 1707, 1475,
     1711, 1470, 1717, 1467, 1719, 1453, 1728, 1452, 1729, 1450,
     1739, 1449, 1740, 1448, 1749, 1439, 1751, 1438, 1757, 1427,
     1761, 1420, 1769, 1417, 1774, 1408, 1779, 1407, 1786, 1405,
     1787,  125, 1791,  157, 1797,  312, 1799,  340, 1808,  349,
     1809,  364, 1819,  466, 1820,  476, 1831,  483, 1837,  499,
     1841,  503, 1845,  516, 1849,  520, 1854,  538, 1859,  557,
     1866,  582, 1867,  598, 1871,  610, 1877,  612, 1879,  629,

     1889,  651, 1899,  656, 1900,  665, 1907,  674, 1911,  683,
     1912,  686, 1917,  687, 1921,  690, 1925,  695, 1929,  698,
     1946,  699, 1947,  705, 1951,  707, 1957,  708, 1958,  710,
     1959,  716, 1969,  721, 1979,  728, 1980,  731, 1987,  733,
     1991,  746, 1992,  748, 1997,  750, 2005,  751, 2009,  753,
     2017,  758, 2026,  760, 2027,  763, 2031,  765, 2037,  766,
     2038,  774, 2039,  783, 2049,  786, 2059,  788, 2067,  797,
     2071,  798, 2072,  799, 2077,  803, 2079,  808, 2084,  809,
     2085,  810, 2089,  811, 2097,  812, 2107,  820, 2117,  830,
     2118,  831, 2119,  838, 2125,  840, 2129,  841, 2130,  842,

     2139,  844, 2147,  845, 2151,  846, 2159,  867, 2164,  870,
     2165,  874, 2169,  877, 2176,  879, 2177,  888, 2187,  889,
     2197,  892, 2198,  899, 2199,  902, 2205,  911, 2209,  920,
     2210,  922, 2227,  925, 2231,  932, 2235,  937, 2239,  947,
     2244,  950, 2245,  951, 2249,  954, 2256,  957, 2257,  959,
     2267,  968, 2277,  969, 2279,  979, 2285,  980, 2289,  982,
     2290,  991, 2297, 1000, 2302, 1002, 2307, 1005, 2311, 1012,
     2315, 1017, 2319, 1018, 2325, 1027, 2336, 1030, 2337, 1037,
     2347, 1039, 2348, 1042, 2357, 1048, 2359, 1049, 2365, 1059,
     2369, 1060, 2370, 1062, 2377, 1071, 2382, 1074, 2387, 1077,

     2395, 1080, 2399, 1085, 2405, 1092, 2407, 1097, 2416, 1107,
     2417, 1110, 2427, 1117, 2428, 1119, 2437, 1122, 2439, 1128,
     2445, 1129, 2449, 1139, 2457, 1140, 2462, 1142, 2467, 1144,
     2474, 1151, 2475, 1154, 2479, 1165, 2485, 1168, 2487, 1172,
     2496, 1177, 2497, 1187, 2507, 1190, 2508, 1197, 2519, 1199,
     2525, 1200, 2529, 1202, 2533, 1209, 2537, 1220, 2542, 1230,
     2547, 1231, 2554, 1234, 2555, 1235, 2559, 1245, 2565, 1248,
     2567, 1249, 2577, 1252, 2587, 1257, 2588, 1267, 2595, 1277,
     2599, 1278, 2600, 1279, 2605, 1280, 2609, 1282, 2613, 1289,
     2617, 1300, 2634, 1310, 2635, 1311, 2639, 1314, 2645, 1315,

     2646, 1316, 2647, 1325, 2657, 1328, 2667, 1337, 2668, 1340,
     2675, 1347, 2679, 1357, 2680, 1358, 2685, 1359, 2693, 1360,
     2697, 1362, 2705, 1369, 2714, 1372, 2715, 1390, 2719, 1395,
     2725, 7920, 2726, 7920, 2778, 2790, 2802, 2814, 2826, 2838,
     2850, 1415, 2862, 2866, 2877, 2888, 2892, 2904, 2914, 2918,
     2922, 2934, 2946, 2958, 2962, 2974, 2985, 2997, 3007, 3019,
     3031, 3043, 3055, 3067, 3079, 3091, 3103, 3115, 3127, 3139,
     3151, 3163, 3175, 3187, 3199, 3211, 3223, 3235, 3247, 3259,
     3271, 3283, 3295, 3307, 3319, 3331, 3343, 3355, 3367, 3379,
     3391, 3403, 3415, 3427, 3439, 3451, 3463, 3475, 3487, 3499,

     3511, 3523, 3535, 3547, 3559, 3571, 3583, 3595, 3607, 3619,
     3631, 3643, 3655, 3667, 3679, 3691, 3703, 3715, 3727, 3739,
     3751, 3763, 3775, 3787, 3799, 3811, 3823, 3835, 3847, 3859,
     3871, 3883, 3895, 3907, 3919, 3931, 3943, 3955, 3967, 3979,
     3991, 4003, 4015, 4027, 4039, 4051, 4063, 4075, 4087, 4099,
     4111, 4123, 4135, 4147, 4159, 4171, 4183, 4195, 4207, 4219,
     4231, 4243, 4255, 4267, 4279, 4291, 4303, 4315, 4327, 4339,
     4351, 4363, 4375, 4387, 4399, 4411, 4423, 4435, 4447, 4459,
     4471, 4483, 4495, 4507, 4519, 4531, 4543, 4555, 4567, 4579,
     4591, 4603, 4615, 4627, 4639, 4651, 4663, 4675, 4687, 4699,

     4711, 4723, 4735, 4747, 4759, 4771, 4783, 4795, 4807, 4819,
     4831, 4843, 4855, 4867, 4879, 4891, 4903, 4915, 4927, 4939,
     4951, 4963, 4975, 4987, 4999, 5011, 5023, 5035, 5047, 5059,
     5071, 5083, 5095, 5107, 5119, 5131, 5143, 5155, 5167, 5179,
     5191, 5203, 5215, 5227, 5239, 5251, 5263, 5275, 5287, 5299,
     5311, 5323, 5335, 5347, 5359, 5371, 5383, 5395, 5407, 5419,
     5431, 5443, 5455, 5467, 5479, 5491, 5503, 5515, 5527, 5539,
     5551, 5563, 5575, 5587, 5599, 5611, 5623, 5635, 5647, 5659,
     5671, 5683, 5695, 5707, 5719, 5731, 5743, 5755, 5767, 5779,
     5791, 5803, 5815, 5827, 5839, 5851, 5863, 5875, 5887, 5899,

     5911, 5923, 5935, 5947, 5959, 5971, 5983, 5995, 6007, 6019,
     6031, 6043, 6055, 6067, 6079, 6091, 6103, 6115, 6127, 6139,
     6151, 6163, 6175, 6187, 6199, 6211, 6223, 6235, 6247, 6259,
     6271, 6283, 6295, 6307, 6319, 6331, 6343, 6355, 6367, 6379,
     6391, 6403, 6415, 6427, 6439, 6451, 6463, 6475, 6487, 6499,
     6511, 6523, 6535, 6547, 6559, 6571, 6583, 6595, 6607, 6619,
     6631, 6643, 6655, 6667, 6679, 6691, 6703, 6715, 6727, 6739,
     6751, 6763, 6775, 6787, 6799, 6811, 6823, 6835, 6847, 6859,
     6871, 6883, 6895, 6907, 6919, 6931, 6943, 6955, 6967, 6979,
     6991, 7003, 7015, 7027, 7039, 7051, 7063, 7075, 7087, 7099,

     7111, 7123, 7135, 7147, 7159, 7171, 7183, 7195, 7207, 7219,
     7231, 7243, 7255, 7267, 7279, 7291, 7303, 7315, 7327, 7339,
     7351, 7363, 7375, 7387, 7399, 7411, 7423, 7435, 7447, 7459,
     7471, 7483, 7495, 7507, 7519, 7531, 7543, 7555, 7567, 7579,
     7591, 7603, 7615, 7627, 7639, 7651, 7663, 7675, 7687, 7699,
     7711, 7723, 7735, 7747
    } ;

static yyconst short int yy_def[1755] =
    {   0,
     1335, 1335, 1334,    3, 1334,    5, 1336, 1336,    5,    5,
        5,    5, 1334,   13, 1334,   15, 1337, 1337, 1338, 1338,
     1334, 1339, 1340, 1334, 1334, 1334, 1341, 1334, 1342, 1334,
     1334, 1343, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1344, 1334, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1334, 1334,
     1334, 1345, 1334, 1334, 1345, 1334, 1334, 1334, 1346, 1347,
     1334, 1334, 1348, 1334, 1348, 1334, 1346, 1334, 1334, 1345,
     1346, 1349, 1334, 1350, 1334, 1351, 1352, 1334, 1353, 1334,

     1334, 1334, 1334, 1334, 1354, 1339, 1339, 1334, 1334, 1334,
     1334, 1334, 1341, 1334, 1341, 1355, 1334, 1334, 1334, 1334,
     1343, 1334, 1343,   33, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1334, 1334, 1345,

     1334, 1334, 1345, 1334, 1334, 1334, 1334, 1334, 1334, 1347,
     1334, 1334, 1348, 1348, 1334, 1334, 1334, 1334, 1334, 1345,
     1334, 1334, 1349, 1334, 1350, 1351, 1352, 1334, 1353, 1334,
     1334, 1356, 1354, 1334, 1334, 1334, 1334, 1355, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1357, 1334, 1334, 1334, 1334, 1334,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1334, 1334, 1334,

     1358, 1356, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1357, 1359, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1334, 1334, 1360, 1358, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1359, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,

     1344, 1344, 1344, 1344, 1361, 1360, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1362, 1361, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1363, 1362, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1364, 1363, 1334, 1334, 1334,

     1344, 1344, 1344, 1344, 1344, 1344, 1365, 1364, 1334, 1334,
     1344, 1344, 1344, 1344, 1344, 1366, 1365, 1334, 1334, 1344,
     1344, 1344, 1367, 1366, 1334, 1334, 1344, 1344, 1344, 1368,
     1367, 1334, 1334, 1369, 1368, 1334, 1334, 1370, 1369, 1334,
     1334, 1371, 1370, 1334, 1334, 1372, 1371, 1334, 1334, 1334,
     1373, 1372, 1334, 1334, 1334, 1334, 1334, 1374, 1373, 1334,
     1334, 1334, 1334, 1334, 1375, 1374, 1334, 1334, 1334, 1376,
     1375, 1334, 1334, 1334, 1334, 1377, 1376, 1378, 1377, 1379,
     1378, 1380, 1379, 1381, 1380, 1382, 1381, 1383, 1382, 1384,
     1383, 1385, 1384, 1386, 1385, 1387, 1386, 1388, 1387, 1389,

     1388, 1390, 1389, 1391, 1390, 1392, 1391, 1393, 1392, 1394,
     1393, 1395, 1394, 1396, 1395, 1397, 1396, 1398, 1397, 1399,
     1398, 1400, 1399, 1401, 1400, 1402, 1401, 1403, 1402, 1404,
     1403, 1405, 1404, 1406, 1405, 1407, 1406, 1408, 1407, 1409,
     1408, 1410, 1409, 1411, 1410, 1412, 1411, 1413, 1412, 1414,
     1413, 1415, 1414, 1416, 1415, 1417, 1416, 1418, 1417, 1419,
     1418, 1420, 1419, 1421, 1420, 1422, 1421, 1423, 1422, 1424,
     1423, 1425, 1424, 1426, 1425, 1427, 1426, 1428, 1427, 1429,
     1428, 1430, 1429, 1431, 1430, 1432, 1431, 1433, 1432, 1434,
     1433, 1435, 1434, 1436, 1435, 1437, 1436, 1438, 1437, 1439,

     1438, 1440, 1439, 1441, 1440, 1442, 1441, 1443, 1442, 1444,
     1443, 1445, 1444, 1446, 1445, 1447, 1446, 1448, 1447, 1449,
     1448, 1450, 1449, 1451, 1450, 1452, 1451, 1453, 1452, 1454,
     1453, 1455, 1454, 1456, 1455, 1457, 1456, 1458, 1457, 1459,
     1458, 1460, 1459, 1461, 1460, 1462, 1461, 1463, 1462, 1464,
     1463, 1465, 1464, 1466, 1465, 1467, 1466, 1468, 1467, 1469,
     1468, 1470, 1469, 1471, 1470, 1472, 1471, 1473, 1472, 1474,
     1473, 1475, 1474, 1476, 1475, 1477, 1476, 1478, 1477, 1479,
     1478, 1480, 1479, 1481, 1480, 1482, 1481, 1483, 1482, 1484,
     1483, 1485, 1484, 1486, 1485, 1487, 1486, 1488, 1487, 1489,

     1488, 1490, 1489, 1491, 1490, 1492, 1491, 1493, 1492, 1494,
     1493, 1495, 1494, 1496, 1495, 1497, 1496, 1498, 1497, 1499,
     1498, 1500, 1499, 1501, 1500, 1502, 1501, 1503, 1502, 1504,
     1503, 1505, 1504, 1506, 1505, 1507, 1506, 1508, 1507, 1509,
     1508, 1510, 1509, 1511, 1510, 1512, 1511, 1513, 1512, 1514,
     1513, 1515, 1514, 1516, 1515, 1517, 1516, 1518, 1517, 1519,
     1518, 1520, 1519, 1521, 1520, 1522, 1521, 1523, 1522, 1524,
     1523, 1525, 1524, 1526, 1525, 1527, 1526, 1528, 1527, 1529,
     1528, 1530, 1529, 1531, 1530, 1532, 1531, 1533, 1532, 1534,
     1533, 1535, 1534, 1536, 1535, 1537, 1536, 1538, 1537, 1539,

     1538, 1540, 1539, 1541, 1540, 1542, 1541, 1543, 1542, 1544,
     1543, 1545, 1544, 1546, 1545, 1547, 1546, 1548, 1547, 1549,
     1548, 1550, 1549, 1551, 1550, 1552, 1551, 1553, 1552, 1554,
     1553, 1555, 1554, 1556, 1555, 1557, 1556, 1558, 1557, 1559,
     1558, 1560, 1559, 1561, 1560, 1562, 1561, 1563, 1562, 1564,
     1563, 1565, 1564, 1566, 1565, 1567, 1566, 1568, 1567, 1569,
     1568, 1570, 1569, 1571, 1570, 1572, 1571, 1573, 1572, 1574,
     1573, 1575, 1574, 1576, 1575, 1577, 1576, 1578, 1577, 1579,
     1578, 1580, 1579, 1581, 1580, 1582, 1581, 1583, 1582, 1584,
     1583, 1585, 1584, 1586, 1585, 1587, 1586, 1588, 1587, 1589,

     1588, 1590, 1589, 1591, 1590, 1592, 1591, 1593, 1592, 1594,
     1593, 1595, 1594, 1596, 1595, 1597, 1596, 1598, 1597, 1599,
     1598, 1600, 1599, 1601, 1600, 1602, 1601, 1603, 1602, 1604,
     1603, 1605, 1604, 1606, 1605, 1607, 1606, 1608, 1607, 1609,
     1608, 1610, 1609, 1611, 1610, 1612, 1611, 1613, 1612, 1614,
     1613, 1615, 1614, 1616, 1615, 1617, 1616, 1618, 1617, 1619,
     1618, 1620, 1619, 1621, 1620, 1622, 1621, 1623, 1622, 1624,
     1623, 1625, 1624, 1626, 1625, 1627, 1626, 1628, 1627, 1629,
     1628, 1630, 1629, 1631, 1630, 1632, 1631, 1633, 1632, 1634,
     1633, 1635, 1634, 1636, 1635, 1637, 1636, 1638, 1637, 1639,

     1638, 1640, 1639, 1641, 1640, 1642, 1641, 1643, 1642, 1644,
     1643, 1645, 1644, 1646, 1645, 1647, 1646, 1648, 1647, 1649,
     1648, 1650, 1649, 1651, 1650, 1652, 1651, 1653, 1652, 1654,
     1653, 1655, 1654, 1656, 1655, 1657, 1656, 1658, 1657, 1659,
     1658, 1660, 1659, 1661, 1660, 1662, 1661, 1663, 1662, 1664,
     1663, 1665, 1664, 1666, 1665, 1667, 1666, 1668, 1667, 1669,
     1668, 1670, 1669, 1671, 1670, 1672, 1671, 1673, 1672, 1674,
     1673, 1675, 1674, 1676, 1675, 1677, 1676, 1678, 1677, 1679,
     1678, 1680, 1679, 1681, 1680, 1682, 1681, 1683, 1682, 1684,
     1683, 1685, 1684, 1686, 1685, 1687, 1686, 1688, 1687, 1689,

     1688, 1690, 1689, 1691, 1690, 1692, 1691, 1693, 1692, 1694,
     1693, 1695, 1694, 1696, 1695, 1697, 1696, 1698, 1697, 1699,
     1698, 1700, 1699, 1701, 1700, 1702, 1701, 1703, 1702, 1704,
     1703, 1705, 1704, 1706, 1705, 1707, 1706, 1708, 1707, 1709,
     1708, 1710, 1709, 1711, 1710, 1712, 1711, 1713, 1712, 1714,
     1713, 1715, 1714, 1716, 1715, 1717, 1716, 1718, 1717, 1719,
     1718, 1720, 1719, 1721, 1720, 1722, 1721, 1723, 1722, 1724,
     1723, 1725, 1724, 1726, 1725, 1727, 1726, 1728, 1727, 1729,
     1728, 1730, 1729, 1731, 1730, 1732, 1731, 1733, 1732, 1734,
     1733, 1735, 1734, 1736, 1735, 1737, 1736, 1738, 1737, 1739,

     1738, 1740, 1739, 1741, 1740, 1742, 1741, 1743, 1742, 1744,
     1743, 1745, 1744, 1746, 1745, 1747, 1746, 1748, 1747, 1749,
     1748, 1750, 1749, 1751, 1750, 1752, 1751, 1753, 1752, 1754,
     1753, 1334, 1754,    0, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334
    } ;

static yyconst short int yy_nxt[7983] =
    {   0,
       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   34,   37,   38,   39,   40,
       41,   41,   42,   34,   43,   44,   45,   46,   34,   24,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   57,   57,   59,   57,   60,   61,   62,   57,
       63,   64,   57,   65,   66,   67,   68,   57,   57,   69,
       70,   71,   24,   72,   72,   72,   72,   73,   72,   74,
       72,   72,   72,   72,   72,   72,   72,   72,   75,   72,
       72,   76,   77,   77,   72,   72,   72,   72,   72,   72,
       78,   79,   72,   80,   81,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   82,   72,   78,   84,   84,   86,   86,   89,  108,
      111,  111,  111,   90,  100,  101,  114,  117,  118,  114,
      102,  100,  101,   85,   85,  122,  119,  102,  109,  965,
       87,   87,   91,   88,   88,   89,   89,  135,  103,  104,
      115,   90,  120,  115,  123,  103,  104,  137,  136,  140,
      140,  140,  110,  154,  155,  141,  138,  139,  156,  157,
       91,  967,   92,   89,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   94,   93,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   93,
       93,   93,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   96,   95,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   95,   95,   95,  124,  142,  969,  198,  150,  145,
      143,  146,  146,  146,  151,  152,  153,  144,  145,  162,
      146,  146,  146,  163,  164,  179,  187,  191,  193,  147,
      192,  180,  188,  194,  971,  166,  125,  126,  147,  127,
      167,  128,  199,  973,  129,  234,  168,  170,  148,  169,
      130,  171,  173,  131,  132, 1334,  133,  172,  975,  182,
      113,  174,  175,  176,  204,  204,  204,  183,  235,  239,

      240,  177,  184,  178,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  116,  201,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  202,  201,  201,  204,  204,  204,  207,
      215,  219,  208,  208,  219, 1334,  219,  208,  208,  220,
      122,  221,  222,  208,  208,  218,  111,  111,  111,  216,
      977, 1334,  255,  256, 1334,  140,  140,  140,  219,  123,

      979,  219,  224,  205,  250,  250,  250,  981,  145,  209,
      146,  146,  146,  147,  209,  253,  253,  253, 1334,  251,
      209,  251,  147,  983,  252,  252,  252,  985,  147,  253,
      253,  253,  253,  253,  253,  259,  260,  261,  270,  278,
      987,  271,  289,  262,  989,  290,  204,  204,  204,  363,
      279,  298,  298,  298,  299,  299,  219,  300,  300,  300,
      364,  219,  991,  221,  222,  298,  298,  298,  298,  298,
      298,  300,  300,  300,  300,  300,  300,  219,  221,  222,
     1334,  993,  220,  219,  224,  250,  250,  250,  252,  252,
      252,  252,  252,  252,  324,  325, 1334,  353,  353, 1334,

      253,  253,  253,  147,  219,  331,  995,  332,  371,  372,
      333,  298,  298,  298,  253,  253,  253,  253,  253,  253,
      334, 1334,  997, 1334,  335,  298,  298,  298,  298,  298,
      298,  354,  354,  354,  999, 1334, 1001, 1334,  371,  372,
     1334,  363,  407,  407,  408,  354,  354,  354,  354,  354,
      354, 1334,  364, 1003, 1334,  412,  418, 1334,  448,  412,
      418,  560,  561,  454, 1334, 1334,  413,  419,  448,  449,
      413,  419,  409, 1334,  455, 1005, 1334,  365, 1334,  449,
     1007, 1334,  479,  481, 1334,  476,  476,  476,  454, 1009,
     1334,  414,  412,  480,  482,  476,  476,  476, 1011,  455,

     1334,  363,  479,  413,  481, 1334, 1334, 1013, 1334, 1334,
     1015, 1017,  364,  480, 1019,  482,  500,  500,  500, 1021,
     1334, 1334, 1023, 1025, 1334,  500,  500,  500, 1334, 1027,
     1334, 1029, 1031, 1334, 1033, 1334, 1334, 1334,  499, 1334,
     1035,  158, 1334, 1334, 1334, 1037, 1334, 1334, 1334, 1334,
      158, 1334, 1039, 1334, 1334, 1041, 1334, 1043, 1334, 1334,
     1334, 1334, 1334, 1334,  549,  549,  549,  549,  549,  549,
     1045, 1334, 1047, 1334, 1049, 1051, 1334, 1053, 1334, 1334,
     1334, 1334, 1055, 1334, 1057, 1334, 1334, 1059,  550, 1061,
     1063,  550,  554,  554,  554, 1334,  555, 1334, 1065, 1334,

     1334,  556, 1334, 1334,  554,  554,  554, 1067,  555, 1334,
     1069, 1334, 1071,  556, 1334,  574,  574,  574,  574,  574,
      574, 1073, 1075, 1077, 1334, 1334, 1334, 1079, 1334, 1334,
     1334, 1334, 1081, 1083, 1085, 1087, 1089, 1334, 1334,  557,
      575, 1334, 1334,  575, 1091, 1334, 1334, 1334, 1334, 1334,
     1334,  557, 1334, 1334, 1093, 1095, 1334, 1334, 1334, 1334,
     1334, 1334, 1097, 1334, 1099, 1101, 1103, 1334, 1105, 1107,
     1109, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1111, 1334, 1334, 1113, 1334, 1334, 1334, 1115, 1334,

     1334, 1117, 1334, 1119, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1121, 1123, 1334, 1334, 1125, 1334, 1334, 1334,
     1334, 1334, 1334, 1127, 1334, 1334, 1129, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1131, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1133, 1334, 1135, 1334, 1334, 1137,
     1334, 1334, 1334, 1334, 1334, 1334, 1139, 1334, 1334, 1334,
     1334, 1141, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1143, 1334, 1334, 1145, 1147, 1334, 1334, 1149, 1334,
     1334, 1151, 1334, 1153, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1155, 1157, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1159, 1161, 1334, 1163, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1165, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1167, 1334, 1169, 1334, 1334, 1171,
     1334, 1334, 1334, 1334, 1334, 1334, 1173, 1334, 1334, 1334,
     1334, 1175, 1177, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1179, 1334, 1334, 1181, 1334, 1334, 1334, 1334, 1334,
     1334, 1183, 1334, 1185, 1334, 1334, 1187, 1334, 1334, 1334,
     1334, 1334, 1189, 1191, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1193, 1195, 1334, 1197, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1199, 1334, 1334, 1201, 1334,

     1334, 1203, 1334, 1334, 1205, 1334, 1334, 1334, 1334, 1207,
     1334, 1334, 1334, 1334, 1334, 1334, 1209, 1334, 1334, 1334,
     1334, 1211, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1213, 1334, 1334, 1215, 1334, 1334, 1334, 1334, 1334,
     1334, 1217, 1334, 1219, 1334, 1334, 1221, 1334, 1334, 1334,
     1334, 1334, 1223, 1225, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1227, 1229, 1334, 1231, 1334, 1233, 1334,
     1334, 1334, 1334, 1334, 1334, 1235, 1334, 1334, 1237, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1239,
     1334, 1334, 1241, 1334, 1334, 1334, 1243, 1334, 1334, 1334,

     1334, 1245, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1247, 1334, 1334, 1249, 1334, 1334, 1334, 1334, 1334,
     1334, 1251, 1334, 1253, 1255, 1334, 1257, 1334, 1334, 1334,
     1334, 1334, 1334, 1259, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1261, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1263, 1265, 1334, 1334, 1267, 1269,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1271,
     1334, 1334, 1273, 1275, 1334, 1334, 1277, 1334, 1334, 1334,
     1334, 1279, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1281, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1283, 1285, 1287, 1289, 1334, 1291, 1334, 1334, 1334,
     1334, 1334, 1334, 1293, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1295, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1297, 1299, 1334, 1334, 1301, 1303,
     1305, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1307,
     1334, 1334, 1309, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1311, 1334, 1334, 1313, 1334, 1334, 1334, 1334, 1334,
     1334, 1315, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1317, 1319, 1321, 1323, 1334, 1325, 1334, 1334, 1334,
     1334, 1334, 1334, 1327, 1334, 1334, 1329, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1331, 1334, 1334, 1334, 1334, 1333,
     1334, 1334, 1334, 1334, 1334, 1334,  116, 1334, 1334,  963,
     1334,  961,  959, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  957, 1334, 1334,  955, 1334, 1334, 1334, 1334, 1334,
     1334,  953, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  951,  949, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  947,  945,  943, 1334,  941,  939, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  937, 1334, 1334,  935, 1334, 1334, 1334, 1334,  933,

     1334, 1334, 1334, 1334, 1334, 1334,  931, 1334, 1334,  929,
     1334,  927, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      925,  923, 1334, 1334,  921, 1334, 1334, 1334, 1334, 1334,
     1334,  919, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  917,  915, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  913,  911,  909, 1334,  907,  905,  903, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  901,
     1334, 1334,  899, 1334, 1334, 1334,  897, 1334, 1334,  895,
     1334,  893, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

      891,  889, 1334, 1334,  887, 1334, 1334, 1334, 1334, 1334,
     1334,  885, 1334, 1334,  883, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334,  881, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  879, 1334,  877, 1334, 1334,  875, 1334, 1334,
     1334, 1334, 1334, 1334,  873, 1334, 1334, 1334, 1334,  871,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  869,
     1334, 1334,  867,  865, 1334, 1334,  863, 1334, 1334,  861,
     1334,  859, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      857,  855, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  853,  851, 1334,  849, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334,  847, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  845, 1334,  843, 1334, 1334,  841, 1334, 1334,
     1334, 1334, 1334, 1334,  839, 1334, 1334, 1334, 1334,  837,
      835, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  833,
     1334, 1334,  831, 1334, 1334, 1334, 1334, 1334, 1334,  829,
     1334,  827, 1334, 1334,  825, 1334, 1334, 1334, 1334, 1334,
      823,  821, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  819,  817, 1334,  815, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334,  813, 1334, 1334,  811, 1334, 1334,  809,
     1334, 1334,  807, 1334, 1334, 1334, 1334,  805, 1334, 1334,

     1334, 1334, 1334, 1334,  803, 1334, 1334, 1334, 1334,  801,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  799,
     1334, 1334,  797, 1334, 1334, 1334, 1334, 1334, 1334,  795,
     1334,  793, 1334, 1334,  791, 1334, 1334, 1334, 1334, 1334,
      789,  787, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  785,  783, 1334,  781, 1334,  779, 1334, 1334, 1334,
     1334, 1334, 1334,  777, 1334, 1334,  775, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  773, 1334, 1334,
      771, 1334, 1334, 1334,  769, 1334, 1334, 1334, 1334,  767,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  765,

     1334, 1334,  763, 1334, 1334, 1334, 1334, 1334, 1334,  761,
     1334,  759,  757, 1334,  755, 1334, 1334, 1334, 1334, 1334,
     1334,  753, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  751, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  749,  747, 1334, 1334,  745,  743, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  741, 1334, 1334,
      739,  737, 1334, 1334,  735, 1334, 1334, 1334, 1334,  733,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  731,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  729,
      727,  725,  723, 1334,  721, 1334, 1334, 1334, 1334, 1334,

     1334,  719, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  717, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334,  715,  713, 1334, 1334,  711,  709,  707, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  705, 1334, 1334,
      703, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  701,
     1334, 1334,  699, 1334, 1334, 1334, 1334, 1334, 1334,  697,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  695,
      693,  691,  689, 1334,  687, 1334, 1334, 1334, 1334, 1334,
     1334,  685, 1334, 1334,  683, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334,  681, 1334, 1334, 1334, 1334,  679, 1334, 1334,
     1334, 1334, 1334, 1334,  677, 1334, 1334,  675, 1334,  673,
      671, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  669,
     1334, 1334,  667, 1334, 1334, 1334, 1334, 1334, 1334,  665,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      663,  661, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      659,  657,  655, 1334,  653,  651, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  649,
     1334, 1334,  647, 1334, 1334, 1334, 1334,  645, 1334, 1334,
     1334, 1334, 1334, 1334,  643, 1334, 1334,  641, 1334,  639,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  637,  635,
     1334, 1334,  633, 1334, 1334, 1334, 1334, 1334, 1334,  631,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      629,  627, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      625,  623,  621, 1334,  619,  617,  615, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  613, 1334, 1334,
      611, 1334, 1334, 1334,  609, 1334, 1334,  607, 1334,  605,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  603,  601,
     1334, 1334,  599, 1334, 1334, 1334, 1334, 1334, 1334,  597,

     1334, 1334,  595, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  593, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      591, 1334,  589, 1334, 1334,  587, 1334, 1334, 1334, 1334,
     1334, 1334,  585, 1334, 1334, 1334, 1334,  583, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  581, 1334, 1334,
      579,  569, 1334, 1334,  569, 1334, 1334,  577, 1334,  573,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  572,  571,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  569,
      568, 1334,  567, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  560, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

      566, 1334,  564, 1334, 1334,  563, 1334, 1334, 1334, 1334,
     1334, 1334,  562, 1334, 1334, 1334, 1334,  559,  553, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  552, 1334, 1334,
      548, 1334, 1334, 1334, 1334, 1334, 1334,  547, 1334,  545,
     1334, 1334,  544, 1334, 1334, 1334, 1334, 1334,  543,  541,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  540,
      539, 1334,  537, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,  536, 1334, 1334,  535, 1334, 1334,  533, 1334, 1334,
      532, 1334, 1334, 1334, 1334,  531, 1334, 1334, 1334, 1334,
     1334, 1334,  529, 1334, 1334, 1334, 1334,  528, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334,  527, 1334, 1334,
      526, 1334, 1334, 1334, 1334, 1334, 1334,  525, 1334,  524,
     1334, 1334,  522, 1334, 1334, 1334, 1334, 1334,  521,  520,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,  519,
      518, 1334,  517, 1334,  515, 1334, 1334, 1334, 1334, 1334,
     1334,  514, 1334, 1334,  513, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334,  512, 1334, 1334,  511, 1334,
     1334, 1334,  510, 1334, 1334, 1334, 1334,  509, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  508, 1334, 1334,
      506, 1334, 1334, 1334, 1334, 1334, 1334,  505, 1334,  504,

      503, 1334,  502, 1334, 1334, 1334, 1334, 1334, 1334,  501,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      492, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      498,  497, 1334, 1334,  495,  494, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334,  493, 1334, 1334,  492,  491,
     1334, 1334,  490, 1334, 1334, 1334, 1334,  489, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  488, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334,  487,  486,  485,
      484, 1334,  483, 1334, 1334, 1334, 1334, 1334, 1334,  478,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

      477, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
      475,  474, 1334, 1334,  472,  471,  470, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334,  469, 1334, 1334,  468, 1334,
     1334, 1334, 1334, 1334, 1334,  467, 1334,  466, 1334, 1334,
      465, 1334, 1334, 1334, 1334,  464, 1334,  463, 1334, 1334,
     1334,  462, 1334, 1334,  461,  460, 1334,  459,  458,  457,
      456,  453,  452,  451,  367, 1334, 1334,  450,  447,  446,
     1334,  407,  445,  443,  442,  441, 1334, 1334,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  440,  107,
      113,  113,  113,  113,  439,  113,  113,  113,  113,  113,
      113,  113,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  160,  438,  437,  160,  200,  200,
      200,  436,  200,  200,  200,  435,  200,  200,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      210,  434,  433,  210,  213,  213,  213,  213,  213,  213,
      432,  213,  213,  213,  213,  213,  223,  431,  430,  429,
      428,  427,  223,  223,  426,  223,  225,  425,  424,  225,
      226,  423,  371,  226,  227,  227,  227,  227,  227,  227,
      227,  422,  227,  227,  227,  227,  229,  229,  421,  229,
      229,  420,  229,  229,  229,  229,  229,  229,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      238,  417,  416,  238,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  316,  367,  415,  411,
      410,  406,  404,  403,  402,  401,  316,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  373,
      400,  399,  398,  397,  396,  373,  395,  394,  373,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  624,

      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  640,  640,  640,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  724,

      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  874,

      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  890,  890,  890,  890,  890,

      890,  890,  890,  890,  890,  890,  890,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  940,  940,  940,  940,  940,

      940,  940,  940,  940,  940,  940,  940,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  956,  956,  956,  956,  956,  956,  956,  956,  956,

      956,  956,  956,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  974,

      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1024,

     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1090, 1090, 1090, 1090, 1090,

     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1124,

     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1140, 1140, 1140, 1140, 1140,

     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1206, 1206, 1206, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1220, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1246, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,

     1256, 1256, 1256, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1286, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1302, 1302, 1302,
     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,

     1306, 1306, 1306, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1310, 1310, 1310, 1310, 1310,
     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1324,

     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  315,
      370,  369,  368,  367,  366,  362,  361,  360,  359,  358,
      357,  356,  352,  351,  350,  349,  348,  347,  346,  345,

      344,  343,  342,  341,  340,  339,  338,  337,  336,  330,
      329,  328,  327,  326,  323,  322,  321,  320,  319,  318,
      317,  259,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  239,  304,  303,  302,  221,  217, 1334,
      214,  211,  297,  296,  295,  294,  293,  292,  291,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  277,  276,
      275,  274,  273,  272,  269,  268,  267,  266,  265,  264,
      263,  258,  257,  254,  249,  248,  247,  246,  245,  244,
      243,  242,  241, 1334,  237,  236,  234,  106,  233,  231,
      231,  230,  228,  217,  214,  212,  211,  203,  197,  196,

      195,  190,  189,  186,  185,  181,  165,  161,  159,  158,
      149,  134,  112,  106, 1334,   98,   98,   23,   23,   21,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334
    } ;

static yyconst short int yy_chk[7983] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    8,    9,   10,   11,   23,
       25,   25,   25,   11,   19,   19,   27,   30,   30,  113,
       19,   20,   20,    7,    8,   32,   31,   20,   23,  962,
        9,   10,   11,    9,   10,   11,   12,   36,   19,   19,
       27,   12,   31,  113,   32,   20,   20,   37,   36,   38,
       38,   38,   23,   44,   44,   38,   37,   37,   45,   45,
       12,  964,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   33,   39,  966,   70,   43,   40,
       39,   40,   40,   40,   43,   43,   43,   39,   41,   50,
       41,   41,   41,   50,   50,   55,   61,   64,   65,   40,
       64,   55,   61,   65,  968,   52,   33,   33,   41,   33,
       52,   33,   70,  970,   33,  109,   52,   53,   40,   52,
       33,   53,   54,   33,   33,  115,   33,   53,  972,   58,
      115,   54,   54,   54,   77,   77,   77,   58,  109,  118,

      118,   54,   58,   54,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   76,   76,   76,   79,
       85,   89,   87,   87,   90,  106,   89,   91,   91,   90,
      121,   92,   92,   79,   79,   87,  111,  111,  111,   85,
      974,  106,  151,  151,  106,  140,  140,  140,   89,  121,

      976,   90,   92,   76,  145,  145,  145,  978,  146,   87,
      146,  146,  146,  140,   91,  148,  148,  148,  106,  147,
       79,  147,  145,  980,  147,  147,  147,  982,  146,  148,
      148,  148,  148,  148,  148,  158,  158,  161,  170,  178,
      984,  170,  190,  161,  986,  190,  204,  204,  204,  363,
      178,  205,  205,  205,  208,  208,  219,  209,  209,  209,
      363,  219,  988,  223,  223,  205,  205,  205,  205,  205,
      205,  209,  209,  209,  209,  209,  209,  220,  224,  224,
      233,  990,  220,  219,  223,  250,  250,  250,  251,  251,
      251,  252,  252,  252,  269,  269,  233,  299,  299,  233,

      253,  253,  253,  250,  220,  276,  992,  276,  316,  316,
      276,  298,  298,  298,  253,  253,  253,  253,  253,  253,
      276,  302,  994,  233,  276,  298,  298,  298,  298,  298,
      298,  300,  300,  300,  996,  356,  998,  302,  373,  373,
      302,  309,  357,  357,  357,  300,  300,  300,  300,  300,
      300,  356,  309, 1000,  356,  360,  367,  406,  411,  412,
      418,  553,  553,  421,  302,  445,  360,  367,  448,  411,
      412,  418,  357,  406,  421, 1002,  406,  309,  356,  448,
     1004,  445,  452,  453,  445,  447,  447,  447,  454, 1006,
      474,  360,  477,  452,  453,  476,  476,  476, 1008,  454,

      406,  478,  479,  477,  481,  497,  474, 1010,  445,  474,
     1012, 1014,  478,  479, 1016,  481,  483,  483,  483, 1018,
      508,  497, 1020, 1022,  497,  500,  500,  500,  517, 1024,
      524, 1026, 1028,  474, 1030,  531,  508,  535,  476,  508,
     1032,  483,  539,  543,  517, 1034,  524,  517,  497,  524,
      500,  531, 1036,  535,  531, 1038,  535, 1040,  539,  543,
      547,  539,  543,  508,  545,  545,  545,  549,  549,  549,
     1042,  517, 1044,  524, 1046, 1048,  547, 1050,  531,  547,
      535,  552, 1052,  559, 1054,  539,  543, 1056,  545, 1058,
     1060,  549,  550,  550,  550,  566,  550,  552, 1062,  559,

      552,  550,  559,  547,  554,  554,  554, 1064,  554,  571,
     1066,  566, 1068,  554,  566,  569,  569,  569,  574,  574,
      574, 1070, 1072, 1074,  552,  571,  559, 1076,  571,  577,
      579,  581, 1078, 1080, 1082, 1084, 1086,  583,  566,  550,
      569,  585,  587,  574, 1088,  577,  579,  581,  577,  579,
      581,  554,  571,  583, 1090, 1092,  583,  585,  587,  589,
      585,  587, 1094,  591, 1096, 1098, 1100,  593, 1102, 1104,
     1106,  595,  577,  579,  581,  589,  597,  599,  589,  591,
      583,  601,  591,  593,  585,  587,  593,  595,  603,  605,
      595, 1108,  597,  599, 1110,  597,  599,  601, 1112,  607,

      601, 1114,  589, 1116,  603,  605,  591,  603,  605,  609,
      593,  611, 1118, 1120,  595,  607, 1122,  613,  607,  597,
      599,  615,  617, 1124,  601,  609, 1126,  611,  609,  619,
      611,  603,  605,  613,  621, 1128,  613,  615,  617,  623,
      615,  617,  607,  625, 1130,  619, 1132,  627,  619, 1134,
      621,  629,  609,  621,  611,  623, 1136,  631,  623,  625,
      613, 1138,  625,  627,  615,  617,  627,  629,  633,  635,
      629, 1140,  619,  631, 1142, 1144,  631,  621, 1146,  637,
      639, 1148,  623, 1150,  633,  635,  625,  633,  635,  641,
      627,  643, 1152, 1154,  629,  637,  639,  645,  637,  639,

      631,  647,  649, 1156, 1158,  641, 1160,  643,  641,  651,
      643,  633,  635,  645,  653, 1162,  645,  647,  649,  655,
      647,  649,  637,  639, 1164,  651, 1166,  657,  651, 1168,
      653,  659,  641,  653,  643,  655, 1170,  661,  655,  663,
      645, 1172, 1174,  657,  647,  649,  657,  659,  665,  667,
      659, 1176,  651,  661, 1178,  663,  661,  653,  663,  669,
      671, 1180,  655, 1182,  665,  667, 1184,  665,  667,  673,
      657,  675, 1186, 1188,  659,  669,  671,  677,  669,  671,
      661,  679,  663, 1190, 1192,  673, 1194,  675,  673,  681,
      675,  665,  667,  677,  683, 1196,  677,  679, 1198,  685,

      679, 1200,  669,  671, 1202,  681,  687,  689,  681, 1204,
      683,  691,  673,  683,  675,  685, 1206,  693,  685,  695,
      677, 1208,  687,  689,  679,  687,  689,  691,  697,  699,
      691, 1210,  681,  693, 1212,  695,  693,  683,  695,  701,
      703, 1214,  685, 1216,  697,  699, 1218,  697,  699,  687,
      689,  705, 1220, 1222,  691,  701,  703,  707,  701,  703,
      693,  709,  695, 1224, 1226,  711, 1228,  705, 1230,  713,
      705,  697,  699,  707,  715, 1232,  707,  709, 1234,  717,
      709,  711,  701,  703,  711,  713,  719,  721,  713, 1236,
      715,  723, 1238,  715,  705,  717, 1240,  725,  717,  727,

      707, 1242,  719,  721,  709,  719,  721,  723,  711,  729,
      723, 1244,  713,  725, 1246,  727,  725,  715,  727,  731,
      733, 1248,  717, 1250, 1252,  729, 1254,  735,  729,  719,
      721,  737,  739, 1256,  723,  731,  733,  741,  731,  733,
      725,  743,  727,  735, 1258,  745,  735,  737,  739,  747,
      737,  739,  729,  741, 1260, 1262,  741,  743, 1264, 1266,
      743,  745,  731,  733,  745,  747,  749,  751,  747, 1268,
      735,  753, 1270, 1272,  737,  739, 1274,  755,  757,  759,
      741, 1276,  749,  751,  743,  749,  751,  753,  745,  761,
      753, 1278,  747,  755,  757,  759,  755,  757,  759,  763,

      765, 1280, 1282, 1284, 1286,  761, 1288,  767,  761,  749,
      751,  769,  771, 1290,  753,  763,  765,  773,  763,  765,
      755,  757,  759,  767, 1292,  775,  767,  769,  771,  777,
      769,  771,  761,  773, 1294, 1296,  773,  779, 1298, 1300,
     1302,  775,  763,  765,  775,  777,  781,  783,  777, 1304,
      767,  785, 1306,  779,  769,  771,  779,  787,  789,  791,
      773, 1308,  781,  783, 1310,  781,  783,  785,  775,  793,
      785, 1312,  777,  787,  789,  791,  787,  789,  791,  795,
      779, 1314, 1316, 1318, 1320,  793, 1322,  797,  793,  781,
      783,  799,  801, 1324,  785,  795, 1326,  803,  795,  805,

      787,  789,  791,  797,  807,  809,  797,  799,  801,  811,
      799,  801,  793,  803, 1328,  805,  803,  813,  805, 1330,
      807,  809,  795,  807,  809,  811, 1342,  815,  811,  960,
      797,  958,  956,  813,  799,  801,  813,  817,  819,  821,
      803,  954,  805,  815,  952,  823,  815,  807,  809,  825,
      827,  950,  811,  817,  819,  821,  817,  819,  821,  829,
      813,  823,  948,  946,  823,  825,  827,  831,  825,  827,
      815,  833,  944,  942,  940,  829,  938,  936,  829,  835,
      817,  819,  821,  831,  837,  839,  831,  833,  823,  841,
      833,  934,  825,  827,  932,  835,  843,  845,  835,  930,

      837,  839,  829,  837,  839,  841,  928,  847,  841,  926,
      831,  924,  843,  845,  833,  843,  845,  849,  851,  853,
      922,  920,  835,  847,  918,  855,  847,  837,  839,  857,
      859,  916,  841,  849,  851,  853,  849,  851,  853,  843,
      845,  855,  914,  912,  855,  857,  859,  861,  857,  859,
      847,  863,  910,  908,  906,  865,  904,  902,  900,  867,
      849,  851,  853,  861,  869,  871,  861,  863,  855,  873,
      863,  865,  857,  859,  865,  867,  875,  877,  867,  898,
      869,  871,  896,  869,  871,  873,  894,  879,  873,  892,
      861,  890,  875,  877,  863,  875,  877,  881,  865,  883,

      888,  886,  867,  879,  884,  885,  879,  869,  871,  887,
      889,  882,  873,  881,  880,  883,  881,  891,  883,  875,
      877,  885,  893,  878,  885,  887,  889,  895,  887,  889,
      879,  897,  876,  891,  874,  899,  891,  872,  893,  901,
      881,  893,  883,  895,  870,  903,  895,  897,  885,  868,
      897,  899,  887,  889,  899,  901,  905,  907,  901,  866,
      891,  903,  864,  862,  903,  893,  860,  909,  911,  858,
      895,  856,  905,  907,  897,  905,  907,  913,  899,  915,
      854,  852,  901,  909,  911,  917,  909,  911,  903,  919,
      921,  850,  848,  913,  846,  915,  913,  923,  915,  905,

      907,  917,  925,  844,  917,  919,  921,  927,  919,  921,
      909,  911,  842,  923,  840,  929,  923,  838,  925,  931,
      913,  925,  915,  927,  836,  933,  927,  935,  917,  834,
      832,  929,  919,  921,  929,  931,  937,  939,  931,  830,
      923,  933,  828,  935,  933,  925,  935,  941,  943,  826,
      927,  824,  937,  939,  822,  937,  939,  945,  929,  947,
      820,  818,  931,  941,  943,  949,  941,  943,  933,  951,
      935,  816,  814,  945,  812,  947,  945,  953,  947,  937,
      939,  949,  955,  810,  949,  951,  808,  957,  951,  806,
      941,  943,  804,  953,  959,  961,  953,  802,  955,  963,

      945,  955,  947,  957,  800,  965,  957,  967,  949,  798,
      959,  961,  951,  959,  961,  963,  969,  971,  963,  796,
      953,  965,  794,  967,  965,  955,  967,  973,  975,  792,
      957,  790,  969,  971,  788,  969,  971,  959,  961,  977,
      786,  784,  963,  973,  975,  979,  973,  975,  965,  981,
      967,  782,  780,  983,  778,  977,  776,  985,  977,  969,
      971,  979,  987,  774,  979,  981,  772,  989,  981,  983,
      973,  975,  983,  985,  991,  993,  985,  770,  987,  995,
      768,  987,  977,  989,  766,  997,  989,  999,  979,  764,
      991,  993,  981,  991,  993,  995,  983, 1001,  995,  762,

      985,  997,  760,  999,  997,  987,  999, 1003, 1005,  758,
      989,  756,  754, 1001,  752, 1007, 1001,  991,  993, 1009,
     1011,  750,  995, 1003, 1005, 1013, 1003, 1005,  997, 1015,
      999, 1007,  748, 1017, 1007, 1009, 1011, 1019, 1009, 1011,
     1001, 1013,  746,  744, 1013, 1015,  742,  740, 1015, 1017,
     1003, 1005, 1017, 1019, 1021, 1023, 1019,  738, 1007, 1025,
      736,  734, 1009, 1011,  732, 1027, 1029, 1031, 1013,  730,
     1021, 1023, 1015, 1021, 1023, 1025, 1017, 1033, 1025,  728,
     1019, 1027, 1029, 1031, 1027, 1029, 1031, 1035, 1037,  726,
      724,  722,  720, 1033,  718, 1039, 1033, 1021, 1023, 1041,

     1043,  716, 1025, 1035, 1037, 1045, 1035, 1037, 1027, 1029,
     1031, 1039,  714, 1047, 1039, 1041, 1043, 1049, 1041, 1043,
     1033, 1045,  712,  710, 1045, 1051,  708,  706,  704, 1047,
     1035, 1037, 1047, 1049, 1053, 1055, 1049,  702, 1039, 1057,
      700, 1051, 1041, 1043, 1051, 1059, 1061, 1063, 1045,  698,
     1053, 1055,  696, 1053, 1055, 1057, 1047, 1065, 1057,  694,
     1049, 1059, 1061, 1063, 1059, 1061, 1063, 1067, 1051,  692,
      690,  688,  686, 1065,  684, 1069, 1065, 1053, 1055, 1071,
     1073,  682, 1057, 1067,  680, 1075, 1067, 1077, 1059, 1061,
     1063, 1069, 1079, 1081, 1069, 1071, 1073, 1083, 1071, 1073,

     1065, 1075,  678, 1077, 1075, 1085, 1077,  676, 1079, 1081,
     1067, 1079, 1081, 1083,  674, 1087, 1083,  672, 1069,  670,
      668, 1085, 1071, 1073, 1085, 1089, 1091, 1093, 1075,  666,
     1077, 1087,  664, 1095, 1087, 1079, 1081, 1097, 1099,  662,
     1083, 1089, 1091, 1093, 1089, 1091, 1093, 1101, 1085, 1095,
      660,  658, 1095, 1097, 1099, 1103, 1097, 1099, 1087, 1105,
      656,  654,  652, 1101,  650,  648, 1101, 1107, 1089, 1091,
     1093, 1103, 1109, 1111, 1103, 1105, 1095, 1113, 1105,  646,
     1097, 1099,  644, 1107, 1115, 1117, 1107,  642, 1109, 1111,
     1101, 1109, 1111, 1113,  640, 1119, 1113,  638, 1103,  636,

     1115, 1117, 1105, 1115, 1117, 1121, 1123, 1125,  634,  632,
     1107, 1119,  630, 1127, 1119, 1109, 1111, 1129, 1131,  628,
     1113, 1121, 1123, 1125, 1121, 1123, 1125, 1115, 1117, 1127,
      626,  624, 1127, 1129, 1131, 1133, 1129, 1131, 1119, 1135,
      622,  620,  618, 1137,  616,  614,  612, 1139, 1121, 1123,
     1125, 1133, 1141, 1143, 1133, 1135, 1127, 1145, 1135, 1137,
     1129, 1131, 1137, 1139, 1147, 1149, 1139,  610, 1141, 1143,
      608, 1141, 1143, 1145,  606, 1151, 1145,  604, 1133,  602,
     1147, 1149, 1135, 1147, 1149, 1153, 1137, 1155,  600,  598,
     1139, 1151,  596, 1157, 1151, 1141, 1143, 1159, 1161,  594,

     1145, 1153,  592, 1155, 1153, 1163, 1155, 1147, 1149, 1157,
     1165,  590, 1157, 1159, 1161, 1167, 1159, 1161, 1151, 1169,
      588, 1163,  586, 1171, 1163,  584, 1165, 1173, 1153, 1165,
     1155, 1167,  582, 1175, 1167, 1169, 1157,  580, 1169, 1171,
     1159, 1161, 1171, 1173, 1177, 1179, 1173,  578, 1163, 1175,
      576,  573, 1175, 1165,  572, 1181, 1183,  570, 1167,  568,
     1177, 1179, 1169, 1177, 1179, 1185, 1171, 1187,  567,  565,
     1173, 1181, 1183, 1189, 1181, 1183, 1175, 1191, 1193,  564,
      563, 1185,  562, 1187, 1185, 1195, 1187, 1177, 1179, 1189,
     1197,  561, 1189, 1191, 1193, 1199, 1191, 1193, 1181, 1183,

      558, 1195,  557, 1201, 1195,  556, 1197, 1203, 1185, 1197,
     1187, 1199,  555, 1205, 1199, 1207, 1189,  551,  548, 1201,
     1191, 1193, 1201, 1203, 1209, 1211, 1203,  546, 1195, 1205,
      544, 1207, 1205, 1197, 1207, 1213, 1215,  542, 1199,  541,
     1209, 1211,  540, 1209, 1211, 1217, 1201, 1219,  538,  537,
     1203, 1213, 1215, 1221, 1213, 1215, 1205, 1223, 1207,  536,
      534, 1217,  533, 1219, 1217, 1225, 1219, 1209, 1211, 1221,
     1227,  532, 1221, 1223,  530, 1229, 1223,  526, 1213, 1215,
      525, 1225, 1231, 1233, 1225,  523, 1227, 1235, 1217, 1227,
     1219, 1229,  522, 1237, 1229, 1239, 1221,  521, 1231, 1233,

     1223, 1231, 1233, 1235, 1241, 1243, 1235,  520, 1225, 1237,
      519, 1239, 1237, 1227, 1239, 1245, 1247,  518, 1229,  516,
     1241, 1243,  515, 1241, 1243, 1231, 1233, 1249,  514,  513,
     1235, 1245, 1247, 1251, 1245, 1247, 1237, 1253, 1239,  510,
      509, 1255,  507, 1249,  506, 1257, 1249, 1241, 1243, 1251,
     1259,  505, 1251, 1253,  504, 1261, 1253, 1255, 1245, 1247,
     1255, 1257, 1263, 1265, 1257,  502, 1259, 1267,  501, 1259,
     1249, 1261,  499, 1269, 1261, 1271, 1251,  498, 1263, 1265,
     1253, 1263, 1265, 1267, 1255, 1273, 1267,  496, 1257, 1269,
      495, 1271, 1269, 1259, 1271, 1275, 1277,  494, 1261,  493,

      490, 1273,  489, 1279, 1273, 1263, 1265, 1281, 1283,  488,
     1267, 1275, 1277, 1285, 1275, 1277, 1269, 1287, 1271, 1279,
      486, 1289, 1279, 1281, 1283, 1291, 1281, 1283, 1273, 1285,
      475,  473, 1285, 1287,  472,  471, 1287, 1289, 1275, 1277,
     1289, 1291, 1293, 1295, 1291,  470, 1279, 1297,  469,  466,
     1281, 1283,  465, 1299, 1301, 1303, 1285,  464, 1293, 1295,
     1287, 1293, 1295, 1297, 1289, 1305, 1297,  463, 1291, 1299,
     1301, 1303, 1299, 1301, 1303, 1307, 1309,  460,  459,  458,
      457, 1305,  456, 1311, 1305, 1293, 1295, 1313, 1315,  451,
     1297, 1307, 1309, 1317, 1307, 1309, 1299, 1301, 1303, 1311,

      450, 1319, 1311, 1313, 1315, 1321, 1313, 1315, 1305, 1317,
      446,  444, 1317, 1323,  440,  439,  438, 1319, 1307, 1309,
     1319, 1321, 1325, 1327, 1321,  436, 1311, 1329,  435, 1323,
     1313, 1315, 1323, 1331, 1333,  434, 1317,  433, 1325, 1327,
      432, 1325, 1327, 1329, 1319,  431, 1329,  430, 1321, 1331,
     1333,  428, 1331, 1333,  427,  426, 1323,  425,  424,  423,
      422,  420,  417,  416,  415, 1325, 1327,  414,  410,  409,
     1329,  408,  405,  402,  401,  400, 1331, 1333, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,

     1336, 1336, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,  399, 1340,
     1341, 1341, 1341, 1341,  397, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1344,  395,  394, 1344, 1345, 1345,
     1345,  393, 1345, 1345, 1345,  392, 1345, 1345, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,

     1347,  391,  390, 1347, 1348, 1348, 1348, 1348, 1348, 1348,
      389, 1348, 1348, 1348, 1348, 1348, 1349,  387,  386,  384,
      383,  382, 1349, 1349,  381, 1349, 1350,  378,  375, 1350,
     1351,  374,  372, 1351, 1352, 1352, 1352, 1352, 1352, 1352,
     1352,  370, 1352, 1352, 1352, 1352, 1353, 1353,  369, 1353,
     1353,  368, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1355,  366,  365, 1355, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1357,  362,  361,  359,
      358,  355,  352,  351,  350,  349, 1357, 1358, 1358, 1358,

     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1359,
      348,  347,  346,  345,  343, 1359,  342,  341, 1359, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,
     1370, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371,
     1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1374, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375,

     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380,
     1380, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384, 1384,
     1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1389, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1390, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,

     1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405,
     1405, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408,

     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,

     1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425,

     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1429, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433,

     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
     1437, 1437, 1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438,
     1438, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440,
     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1440, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449,
     1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458,

     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,

     1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475,

     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1480,
     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1480, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483,

     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1485,
     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,

     1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508,

     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1515,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515,
     1515, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516,

     1516, 1516, 1516, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1525,

     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1529, 1529, 1529,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533, 1533, 1533,

     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,

     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1550,

     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 1557, 1558, 1558, 1558, 1558, 1558,

     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,

     1566, 1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1575,

     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1580, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583,

     1583, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,

     1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1595,
     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
     1595, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596, 1596, 1596, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1600,

     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1600, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1605,
     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
     1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608,

     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
     1610, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612, 1612, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1615,
     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615,
     1615, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,

     1616, 1616, 1616, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617, 1617, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1619, 1619, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1620,
     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1620, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,
     1621, 1621, 1621, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
     1622, 1622, 1622, 1622, 1622, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624, 1625,

     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,
     1625, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626,
     1626, 1626, 1626, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1628, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1629, 1629, 1629,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629, 1630,
     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630, 1630,
     1630, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1632, 1632, 1632, 1633, 1633, 1633, 1633, 1633,

     1633, 1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1635,
     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635, 1635,
     1635, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636,
     1636, 1636, 1636, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638,
     1638, 1638, 1638, 1638, 1638, 1638, 1638, 1639, 1639, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1640,
     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1640, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,

     1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
     1642, 1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1645,
     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
     1645, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646,
     1646, 1646, 1646, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648, 1648, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1649, 1649, 1649,
     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1650,

     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1651, 1651, 1651, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1654, 1654, 1654,
     1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1655,
     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655,
     1655, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
     1657, 1657, 1657, 1657, 1657, 1658, 1658, 1658, 1658, 1658,

     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1660,
     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1660, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661,
     1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1663, 1663, 1663, 1663, 1663, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1664, 1665,
     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
     1665, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666,

     1666, 1666, 1666, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1668, 1668, 1668, 1668, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1669, 1669, 1669,
     1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1670,
     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670, 1670,
     1670, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1673,
     1673, 1673, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1675,

     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
     1675, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676,
     1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
     1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678,
     1678, 1678, 1678, 1678, 1678, 1678, 1678, 1679, 1679, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1680,
     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1680, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681,
     1681, 1681, 1681, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
     1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683,

     1683, 1683, 1683, 1683, 1683, 1683, 1683, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1685,
     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
     1686, 1686, 1686, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688, 1688, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1690,
     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,

     1691, 1691, 1691, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1692, 1692, 1692, 1693, 1693, 1693, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1693, 1694, 1694, 1694,
     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1695,
     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
     1695, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696,
     1696, 1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1700,

     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1700, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701,
     1701, 1701, 1701, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
     1702, 1702, 1702, 1702, 1702, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1705,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,
     1705, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706,
     1706, 1706, 1706, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1708, 1708, 1708, 1708, 1708,

     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1709, 1709, 1709,
     1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1709, 1710,
     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710, 1710,
     1710, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711,
     1711, 1711, 1711, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
     1712, 1712, 1712, 1712, 1712, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1714, 1714, 1714,
     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1715,
     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715, 1715,
     1715, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716,

     1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
     1717, 1717, 1717, 1717, 1717, 1718, 1718, 1718, 1718, 1718,
     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1719, 1719, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1720,
     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1720, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
     1721, 1721, 1721, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
     1722, 1722, 1722, 1722, 1722, 1723, 1723, 1723, 1723, 1723,
     1723, 1723, 1723, 1723, 1723, 1723, 1723, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1725,

     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
     1726, 1726, 1726, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1728, 1728, 1728, 1728, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1729, 1729, 1729,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1730,
     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1733, 1733, 1733, 1733, 1733,

     1733, 1733, 1733, 1733, 1733, 1733, 1733, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1735,
     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
     1737, 1737, 1737, 1737, 1737, 1738, 1738, 1738, 1738, 1738,
     1738, 1738, 1738, 1738, 1738, 1738, 1738, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1740,
     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1740, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741,

     1741, 1741, 1741, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1742, 1743, 1743, 1743, 1743, 1743,
     1743, 1743, 1743, 1743, 1743, 1743, 1743, 1744, 1744, 1744,
     1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1744, 1745,
     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
     1745, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1748, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1750,

     1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750, 1750,
     1750, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1751, 1751, 1751, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1752, 1752, 1752, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753, 1753, 1754, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754, 1754,  340,
      339,  338,  335,  334,  333,  332,  331,  330,  329,  327,
      326,  325,  324,  323,  322,  320,  319,  318,  317,  315,
      314,  313,  312,  311,  310,  308,  307,  306,  305,  304,
      303,  301,  296,  293,  292,  291,  290,  289,  288,  287,

      285,  284,  283,  282,  281,  280,  279,  278,  277,  275,
      274,  273,  271,  270,  268,  267,  266,  265,  264,  262,
      261,  260,  255,  254,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  236,  235,  232,  222,  217,  214,
      213,  211,  197,  196,  195,  194,  193,  192,  191,  189,
      187,  186,  185,  184,  183,  181,  180,  179,  177,  176,
      175,  174,  173,  171,  169,  168,  167,  166,  165,  163,
      162,  157,  154,  150,  133,  132,  131,  130,  129,  128,
      127,  126,  125,  123,  112,  110,  108,  107,  105,  104,
      102,  101,   98,   86,   83,   82,   81,   75,   68,   67,

       66,   63,   62,   60,   59,   56,   51,   48,   47,   46,
       42,   35,   26,   22,   21,   18,   17,    2,    1, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0

/*
   +----------------------------------------------------------------------+
   | Zend Engine                                                          |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2001 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 0.92 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        | 
   | available at through the world-wide-web at                           |
   | http://www.zend.com/license/0_92.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   +----------------------------------------------------------------------+
*/

#define ST_IN_SCRIPTING 1

#define ST_DOUBLE_QUOTES 2

#define ST_SINGLE_QUOTE 3

#define ST_BACKQUOTE 4

#define ST_HEREDOC 5

#define ST_LOOKING_FOR_PROPERTY 6

#define ST_LOOKING_FOR_VARNAME 7

#define ST_COMMENT 8

#define ST_ONE_LINE_COMMENT 9

#define YY_STACK_USED 1

#ifdef ZEND_WIN32
#include <io.h>
#endif

#include <errno.h>
#include "zend.h"
#include "zend_alloc.h"
#include "zend_language_parser.h"
#include "zend_compile.h"
#include "zend_language_scanner.h"
#include "zend_highlight.h"
#include "zend_constants.h"
#include "zend_variables.h"
#include "zend_operators.h"

#ifdef ZTS
# include <fstream.h>
# ifdef HAVE_STDIOSTR_H
#  include <stdiostr.h>
# endif
# ifdef HAVE_STDIOSTREAM_H
#  include <stdiostream.h>
# endif
# ifdef ZEND_WIN32
#  include <strstrea.h>
# else
#  include <strstream.h>
# endif
#endif

#ifdef HAVE_STDARG_H
# include <stdarg.h>
#endif

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#ifdef ZTS
#define YY_DECL int ZendFlexLexer::lex_scan(zval *zendlval CLS_DC)
#else
#define YY_DECL int lex_scan(zval *zendlval CLS_DC)
#endif

#if SUPPORT_INTERACTIVE
#define YY_INTERACTIVE
#endif

#define ECHO { ZEND_WRITE( yytext, yyleng ); }

#ifdef ZTS
#  define MY_INPUT yyinput
#else
#  define MY_INPUT input
#endif

#include "zend_istdiostream.h"

#define YY_FATAL_ERROR zend_fatal_scanner_error

#define HANDLE_NEWLINES(s,l)													\
do {																			\
	char *p = (s),*boundary = p+(l);											\
																				\
	while (p<boundary) {														\
		if (*p == '\n') {														\
			CG(zend_lineno)++;													\
		} else if ((*p == '\r') && (p+1 < boundary) && (*(p+1) != '\n')) {		\
			CG(zend_lineno)++;													\
		}																		\
		p++;																	\
	}																			\
} while (0)

#define HANDLE_NEWLINE(c) \
{ \
	if (c == '\n' || c == '\r') { \
		CG(zend_lineno)++; \
	} \
}
		

#define ZEND_IS_OCT(c)  ((c)>='0' && (c)<='7')
#define ZEND_IS_HEX(c)  (((c)>='0' && (c)<='9') || ((c)>='a' && (c)<='f') || ((c)>='A' && (c)<='F'))


void zend_fatal_scanner_error(char *message)
{
	zend_error(E_COMPILE_ERROR, message);
}

BEGIN_EXTERN_C()
void startup_scanner(CLS_D)
{
	CG(heredoc) = NULL;
	CG(heredoc_len)=0;
}


void shutdown_scanner(CLS_D)
{
	if (CG(heredoc)) {
		efree(CG(heredoc));
		CG(heredoc_len)=0;
	}
}
END_EXTERN_C()


static inline void save_lexical_state(zend_lex_state *lex_state CLS_DC)
{
#ifndef ZTS
	memcpy(&lex_state->buffer_state,&YY_CURRENT_BUFFER,sizeof(YY_BUFFER_STATE));
	lex_state->in = yyin;
	lex_state->state = YYSTATE;
#else
	lex_state->ZFL = CG(ZFL);
#endif
	lex_state->filename = zend_get_compiled_filename(CLS_C);
	lex_state->lineno = CG(zend_lineno);
}


inline void restore_lexical_state(zend_lex_state *lex_state CLS_DC)
{
#ifndef ZTS
	YY_BUFFER_STATE original_buffer_state = YY_CURRENT_BUFFER;

	if (lex_state->buffer_state) {
		yy_switch_to_buffer(lex_state->buffer_state);
	} else {
		YY_CURRENT_BUFFER = NULL;
	}
		
	yy_delete_buffer(original_buffer_state);
	yyin = lex_state->in;
	BEGIN(lex_state->state);
#else
	delete((ZendFlexLexer *) CG(ZFL));
	CG(ZFL) = lex_state->ZFL;
#endif
	CG(zend_lineno) = lex_state->lineno;
	zend_restore_compiled_filename(lex_state->filename);
}


BEGIN_EXTERN_C()


ZEND_API void zend_file_handle_dtor(zend_file_handle *fh)
{
	switch (fh->type) {
		case ZEND_HANDLE_FP:
			fclose(fh->handle.fp);
			break;
		case ZEND_HANDLE_FILENAME:
			/* We're only supposed to get here when destructing the used_files hash,
			 * which doesn't really contain open files, but references to their names/paths
			 */
			break;
#ifdef ZTS
		case ZEND_HANDLE_FSTREAM:
			delete ((ifstream *) fh->handle.is);
			break;
		case ZEND_HANDLE_STDIOSTREAM:
			istdiostream *pstdiostream = (istdiostream *) fh->handle.is;
			
			fclose(pstdiostream->rdbuf()->stdiofile());
			delete pstdiostream;
			break;
#endif
	}
	if (fh->opened_path) {
		efree(fh->opened_path);
	}
	if (fh->free_filename && fh->filename) {
		efree(fh->filename);
	}
}


int zend_compare_file_handles(zend_file_handle *fh1, zend_file_handle *fh2)
{
	if (fh1->type != fh2->type) {
		return 0;
	}
	switch (fh1->type) {
		case ZEND_HANDLE_FP:
			return fh1->handle.fp==fh2->handle.fp;
			break;
#ifdef ZTS
		case ZEND_HANDLE_FSTREAM:
		case ZEND_HANDLE_STDIOSTREAM:
			return fh1->handle.is==fh2->handle.is;
			break;
#endif
	}
	return 0;
}


ZEND_API void zend_destroy_file_handle(zend_file_handle *file_handle CLS_DC)
{
	zend_llist_del_element(&CG(open_files), file_handle, (int (*)(void *, void *)) zend_compare_file_handles);
}


ZEND_API int open_file_for_scanning(zend_file_handle *file_handle CLS_DC)
{
	char *file_path=NULL;

#ifndef ZTS
	switch (file_handle->type) {
		case ZEND_HANDLE_FILENAME:
			file_handle->handle.fp = zend_fopen(file_handle->filename, &file_handle->opened_path);
			break;
		case ZEND_HANDLE_FD:
			file_handle->handle.fp = fdopen(file_handle->handle.fd, "r");
			break;
		case ZEND_HANDLE_FP:
			file_handle->handle.fp = file_handle->handle.fp;
			break;
	}
	if (!file_handle->handle.fp) {
		return FAILURE;
	}

	file_handle->type = ZEND_HANDLE_FP;	
	if (file_handle->handle.fp != stdin) {
		zend_llist_add_element(&CG(open_files), file_handle);
	}
	/* Reset the scanner for scanning the new file */
	yyin = file_handle->handle.fp;
	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
	BEGIN(INITIAL);
#else
	switch (file_handle->type) {
		case ZEND_HANDLE_FD:
			file_handle->handle.is = new ifstream(file_handle->handle.fd);
			file_handle->type = ZEND_HANDLE_FSTREAM;
			break;
		case ZEND_HANDLE_FILENAME:
			{
				file_handle->handle.fp = zend_fopen(file_handle->filename, &file_handle->opened_path);
				if (!file_handle->handle.fp) {
					return FAILURE;
				}
				file_handle->handle.is = new istdiostream(file_handle->handle.fp);
				file_handle->type = ZEND_HANDLE_STDIOSTREAM;
				break;
			}
		case ZEND_HANDLE_FP:
			if (file_handle->handle.fp==stdin) {
				file_handle->handle.is = &cin;
			} else {
				if (!file_handle->handle.fp) {
					return FAILURE;
				}
				file_handle->handle.is = new istdiostream(file_handle->handle.fp);
				file_handle->type = ZEND_HANDLE_STDIOSTREAM;
			}	
			break;
	}

	if (file_handle->handle.is->fail()) {
		delete file_handle->handle.is;
		return FAILURE;
	}
	if (file_handle->handle.is != &cin) {
		zend_llist_add_element(&CG(open_files), file_handle);
	}

	CG(ZFL) = new ZendFlexLexer;
	CG(ZFL)->switch_streams(file_handle->handle.is, &cout);
#endif

	if (file_handle->opened_path) {
		file_path = file_handle->opened_path; 
	} else {
		file_path = file_handle->filename;
	}

	zend_set_compiled_filename(file_path);
	CG(zend_lineno) = 1;
	return SUCCESS;
}
END_EXTERN_C()


ZEND_API zend_op_array *compile_file(zend_file_handle *file_handle, int type CLS_DC)
{
	zend_lex_state original_lex_state;
	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
	zend_op_array *original_active_op_array = CG(active_op_array);
	zend_op_array *retval=NULL;
	int compiler_result;
	zend_bool compilation_successful=0;
	znode retval_znode;
	zend_bool original_in_compilation = CG(in_compilation);

	retval_znode.op_type = IS_CONST;
	retval_znode.u.constant.type = IS_LONG;
	retval_znode.u.constant.value.lval = 1;
	retval_znode.u.constant.is_ref = 0;
	retval_znode.u.constant.refcount = 1;

	save_lexical_state(&original_lex_state CLS_CC);

	retval = op_array; /* success oriented */

	if (open_file_for_scanning(file_handle CLS_CC)==FAILURE) {
		if (type==ZEND_REQUIRE) {
			zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, file_handle->filename);
			zend_bailout();		
		} else {
			zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, file_handle->filename);
		}
		compilation_successful=0;
	} else {
		init_op_array(op_array, ZEND_USER_FUNCTION, INITIAL_OP_ARRAY_SIZE CLS_CC);
		CG(in_compilation) = 1;
		CG(active_op_array) = op_array;
		compiler_result = zendparse(CLS_C);
		zend_do_return(&retval_znode, 0 CLS_CC);
		CG(in_compilation) = original_in_compilation;
		if (compiler_result==1) { /* parser error */
			CG(unclean_shutdown) = 1;
			retval = NULL;
		}
		compilation_successful=1;
	}

	if (retval) {
		CG(active_op_array) = original_active_op_array;
		if (compilation_successful) {
			pass_two(op_array);
		} else {
			efree(op_array);
			retval = NULL;
		}
	}
	if (compilation_successful) {
		restore_lexical_state(&original_lex_state CLS_CC);
	}
	return retval;
}


zend_op_array *compile_filename(int type, zval *filename CLS_DC ELS_DC)
{
	zend_file_handle file_handle;
	zval tmp;
	zend_op_array *retval;

	if (filename->type != IS_STRING) {
		tmp = *filename;
		zval_copy_ctor(&tmp);
		convert_to_string(&tmp);
		filename = &tmp;
	}
	file_handle.filename = filename->value.str.val;
	file_handle.free_filename = 0;
	file_handle.type = ZEND_HANDLE_FILENAME;
	file_handle.opened_path = NULL;


	retval = zend_compile_file(&file_handle, type CLS_CC);
	if (retval && file_handle.opened_path) {
		int dummy = 1;
		zend_hash_add(&EG(included_files), file_handle.opened_path, strlen(file_handle.opened_path)+1, (void *)&dummy, sizeof(int), NULL);
	}
	zend_destroy_file_handle(&file_handle CLS_CC);

	if (filename==&tmp) {
		zval_dtor(&tmp);
	}
	return retval;
}

#ifndef ZTS
static inline int prepare_string_for_scanning(zval *str, char *filename)
#else
static inline int prepare_string_for_scanning(zval *str, istrstream **input_stream, char *filename CLS_DC)
#endif
{
#ifndef ZTS
	/* enforce two trailing NULLs for flex... */
	STR_REALLOC(str->value.str.val, str->value.str.len+2);

	str->value.str.val[str->value.str.len+1]=0;

	yyin=NULL;
	yy_scan_buffer(str->value.str.val, str->value.str.len+2);
#else
	*input_stream = new istrstream(str->value.str.val, str->value.str.len);
	CG(ZFL) = new ZendFlexLexer;

	CG(ZFL)->switch_streams(*input_stream, &cout);
#endif
	zend_set_compiled_filename(filename);
	CG(zend_lineno) = 1;
	return SUCCESS;
}


zend_op_array *compile_string(zval *source_string, char *filename CLS_DC)
{
	zend_lex_state original_lex_state;
	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
	zend_op_array *original_active_op_array = CG(active_op_array);
	zend_op_array *retval;
	zval tmp;
	int compiler_result;
	zend_bool original_in_compilation = CG(in_compilation);
#ifdef ZTS
	istrstream *input_stream;
#endif

	if (source_string->value.str.len==0) {
		efree(op_array);
		return NULL;
	}

	CG(in_compilation) = 1;

	tmp = *source_string;
	zval_copy_ctor(&tmp);
	convert_to_string(&tmp);
	source_string = &tmp;

	save_lexical_state(&original_lex_state CLS_CC);
#ifndef ZTS
	if (prepare_string_for_scanning(source_string, filename)==FAILURE) {
#else
	if (prepare_string_for_scanning(source_string, &input_stream, filename CLS_CC)==FAILURE) {
#endif
		efree(op_array);
		retval = NULL;
	} else {
		init_op_array(op_array, ZEND_EVAL_CODE, INITIAL_OP_ARRAY_SIZE CLS_CC);
		CG(active_op_array) = op_array;
#ifndef ZTS
		BEGIN(ST_IN_SCRIPTING);
#else
		CG(ZFL)->BeginState(ST_IN_SCRIPTING);
#endif
		compiler_result = zendparse(CLS_C);
		
		if (compiler_result==1) {
			CG(active_op_array) = original_active_op_array;
			CG(unclean_shutdown)=1;
			retval = NULL;
		} else {
			zend_do_return(NULL, 0 CLS_CC);
			CG(active_op_array) = original_active_op_array;
			pass_two(op_array);
			retval = op_array;
		}
		restore_lexical_state(&original_lex_state CLS_CC);
	}
#ifdef ZTS
	delete input_stream;
#endif
	zval_dtor(&tmp);
	CG(in_compilation) = original_in_compilation;
	return retval;
}


BEGIN_EXTERN_C()
int highlight_file(char *filename, zend_syntax_highlighter_ini *syntax_highlighter_ini)
{
	zend_lex_state original_lex_state;
	zend_file_handle file_handle;
	CLS_FETCH();

	file_handle.type = ZEND_HANDLE_FILENAME;
	file_handle.filename = filename;
	file_handle.free_filename = 0;
	file_handle.opened_path = NULL;
	save_lexical_state(&original_lex_state CLS_CC);
	if (open_file_for_scanning(&file_handle CLS_CC)==FAILURE) {
		zend_message_dispatcher(ZMSG_FAILED_HIGHLIGHT_FOPEN, filename);
		return FAILURE;
	}
	zend_highlight(syntax_highlighter_ini);
	zend_destroy_file_handle(&file_handle CLS_CC);
	restore_lexical_state(&original_lex_state CLS_CC);
	return SUCCESS;
}

int highlight_string(zval *str, zend_syntax_highlighter_ini *syntax_highlighter_ini, char *str_name)
{
	zend_lex_state original_lex_state;
	zval tmp = *str;
#ifdef ZTS
	istrstream *input_stream;
#endif
	CLS_FETCH();

	str = &tmp;
	zval_copy_ctor(str);
	save_lexical_state(&original_lex_state CLS_CC);
#ifndef ZTS
	if (prepare_string_for_scanning(str, str_name)==FAILURE) {
#else
	if (prepare_string_for_scanning(str, &input_stream, str_name CLS_CC)==FAILURE) {
#endif
		return FAILURE;
	}
	zend_highlight(syntax_highlighter_ini);
	restore_lexical_state(&original_lex_state CLS_CC);
#ifdef ZTS
	delete input_stream;
#endif
	zval_dtor(str);
	return SUCCESS;
}
END_EXTERN_C()

#ifdef ZTS
BEGIN_EXTERN_C()
int lex_scan(zval *zendlval CLS_DC)
{
	return CG(ZFL)->lex_scan(zendlval CLS_CC);
}


const char *zend_get_zendtext(CLS_D)
{
	return CG(ZFL)->YYText();
}


int zend_get_zendleng(CLS_D)
{
	return CG(ZFL)->YYLeng();
}
END_EXTERN_C()


void ZendFlexLexer::BeginState(int state)
{
	BEGIN(state);
}


ZendFlexLexer::~ZendFlexLexer()
{
	if (yy_start_stack) {
		yy_flex_free(yy_start_stack);
	}
}


int yyFlexLexer::yylex()
{
	fprintf(stderr, "Error:  yyFlexLexer::yylex() called\n");
	return -1;
}

#endif


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yy_c_buf_p - yytext_ptr;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1335 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1334 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
	return T_EXIT;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
	return T_EXIT;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	return T_OLD_FUNCTION;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	return T_FUNCTION;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	return T_CONST;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	return T_RETURN;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	return T_IF;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	return T_ELSEIF;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	return T_ENDIF;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	return T_ELSE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	return T_WHILE;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	return T_ENDWHILE;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	return T_DO;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	return T_FOR;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	return T_ENDFOR;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	return T_FOREACH;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
	return T_ENDFOREACH;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	return T_DECLARE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	return T_ENDDECLARE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
	return T_AS;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
	return T_SWITCH;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
	return T_ENDSWITCH;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
	return T_CASE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
	return T_DEFAULT;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
	return T_BREAK;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
	return T_CONTINUE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
	return T_ECHO;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
	return T_PRINT;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
	return T_CLASS;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
	return T_EXTENDS;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
	yy_push_state(ST_LOOKING_FOR_PROPERTY);
	return T_OBJECT_OPERATOR;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
	yy_pop_state();
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_STRING;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	yyless(0);
	yy_pop_state();
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	return T_PAAMAYIM_NEKUDOTAYIM;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	return T_NEW;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	return T_VAR;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	return T_INT_CAST;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
	return T_DOUBLE_CAST;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
	return T_STRING_CAST;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
	return T_ARRAY_CAST;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
	return T_OBJECT_CAST;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
	return T_BOOL_CAST;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
	return T_UNSET_CAST;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
	return T_EVAL;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
	return T_INCLUDE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
	return T_INCLUDE_ONCE;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
	return T_REQUIRE;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
	return T_REQUIRE_ONCE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
	return T_USE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
	return T_GLOBAL;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
	return T_ISSET;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
	return T_EMPTY;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
	return T_STATIC;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
	return T_UNSET;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
	return T_DOUBLE_ARROW;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
	return T_LIST;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
	return T_ARRAY;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
	return T_INC;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
	return T_DEC;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
	return T_IS_IDENTICAL;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
	return T_IS_NOT_IDENTICAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
	return T_IS_EQUAL;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
	return T_IS_NOT_EQUAL;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
	return T_IS_SMALLER_OR_EQUAL;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
	return T_IS_GREATER_OR_EQUAL;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
	return T_PLUS_EQUAL;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
	return T_MINUS_EQUAL;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
	return T_MUL_EQUAL;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
	return T_DIV_EQUAL;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
	return T_CONCAT_EQUAL;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
	return T_MOD_EQUAL;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
	return T_SL_EQUAL;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
	return T_SR_EQUAL;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
	return T_AND_EQUAL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
	return T_OR_EQUAL;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
	return T_XOR_EQUAL;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
	return T_BOOLEAN_OR;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
	return T_BOOLEAN_AND;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
	return T_LOGICAL_OR;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
	return T_LOGICAL_AND;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
	return T_LOGICAL_XOR;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
	return T_SL;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
	return T_SR;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
	return yytext[0];
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
	yy_push_state(ST_IN_SCRIPTING);
	return '{';
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
	yy_push_state(ST_LOOKING_FOR_VARNAME);
	return T_DOLLAR_OPEN_CURLY_BRACES;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
	/* This is a temporary fix which is dependant on flex and it's implementation */
	if (yy_start_stack_ptr) {
		yy_pop_state();
	}
	return '}';
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	yy_pop_state();
	yy_push_state(ST_IN_SCRIPTING);
	return T_STRING_VARNAME;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
	yyless(0);
	yy_pop_state();
	yy_push_state(ST_IN_SCRIPTING);
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
	errno = 0;
	zendlval->value.lval = strtol(yytext, NULL, 0);
	if (errno == ERANGE) { /* overflow */
		zendlval->value.dval = strtod(yytext,NULL);
		zendlval->type = IS_DOUBLE;
		return T_DNUMBER;
	} else {
		zendlval->type = IS_LONG;
		return T_LNUMBER;
	}
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
	errno = 0;
	zendlval->value.lval = strtoul(yytext, NULL, 16);
	if (errno == ERANGE) { /* overflow */
		/* not trying strtod - it returns trash on 0x-es */
		zendlval->value.lval = LONG_MAX; /* maximal long */
		zend_error(E_NOTICE,"Hex number is too big: %s",yytext);
	} else {
		if (zendlval->value.lval < 0) {
			/* maintain consistency with the old way */
			zendlval->value.dval = (unsigned long) zendlval->value.lval;
			zendlval->type = IS_DOUBLE;
			return T_DNUMBER;
		}
		zendlval->type = IS_LONG;
	}
	zendlval->type = IS_LONG;
	return T_LNUMBER;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ /* treat numbers (almost) as strings inside encapsulated strings */
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_NUM_STRING;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
	zendlval->value.dval = strtod(yytext,NULL);
	zendlval->type = IS_DOUBLE;
	return T_DNUMBER;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
	zendlval->value.lval = CG(zend_lineno);
	zendlval->type = IS_LONG;
	return T_LINE;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
	char *filename = zend_get_compiled_filename(CLS_C);
	
	if (!filename) {
		filename = "";
	}
	zendlval->value.str.len = strlen(filename);
	zendlval->value.str.val = estrndup(filename, zendlval->value.str.len);
	zendlval->type = IS_STRING;
	return T_FILE;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext, yyleng);
	return T_INLINE_HTML;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext,yyleng);
	if (CG(short_tags) || yyleng>2) { /* yyleng>2 means it's not <? but <script> */
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		BEGIN(ST_IN_SCRIPTING);
		return T_OPEN_TAG;
	} else {
		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{
	if ((yytext[1]=='%' && CG(asp_tags))
		|| (yytext[1]=='?' && CG(short_tags))) {
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		BEGIN(ST_IN_SCRIPTING);
		return T_OPEN_TAG_WITH_ECHO;
	} else {
		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 99:
YY_RULE_SETUP
{
	if (CG(asp_tags)) {
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		BEGIN(ST_IN_SCRIPTING);
		return T_OPEN_TAG;
	} else {
		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_INLINE_HTML;
	}
}
	YY_BREAK
case 100:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINE(yytext[yyleng-1]);
	BEGIN(ST_IN_SCRIPTING);
	return T_OPEN_TAG;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
{
	zend_error(E_WARNING, "&lt;?php_track_vars?&gt; is no longer supported - please use the track_vars INI directive instead");
	HANDLE_NEWLINE(yytext[yyleng-1]);
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_INLINE_HTML;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *)estrndup(yytext+1, yyleng-1);
	zendlval->value.str.len = yyleng-1;
	zendlval->type = IS_STRING;
	return T_VARIABLE;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_STRING;
}
	YY_BREAK
case 104:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_STRING;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	return T_WHITESPACE;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
{
	BEGIN(ST_ONE_LINE_COMMENT);
	yymore();
}
	YY_BREAK
case 107:
YY_RULE_SETUP
{
	yymore();
}
	YY_BREAK
case 108:
YY_RULE_SETUP
{
	yymore();
}
	YY_BREAK
case 109:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	BEGIN(ST_IN_SCRIPTING);
	CG(zend_lineno)++;
	return T_COMMENT;
}
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    if (CG(asp_tags) || yytext[yyleng-2] != '%') { /* asp comment? */
		zendlval->value.str.val = yytext; /* no copying - intentional */
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		yyless(yyleng-2);
		BEGIN(ST_IN_SCRIPTING);
		return T_COMMENT;
	} else {
		yymore();
	}
}
	YY_BREAK
case 111:
YY_RULE_SETUP
{
	CG(comment_start_line) = CG(zend_lineno);
	BEGIN(ST_COMMENT);
	yymore();
}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
	yymore();
}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext, yyleng);
	BEGIN(ST_IN_SCRIPTING);
	return T_COMMENT;
}
	YY_BREAK
case 114:
YY_RULE_SETUP
{
	yymore();
}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
	zendlval->value.str.val = yytext; /* no copying - intentional */
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext, yyleng);
	BEGIN(INITIAL);
	return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
	if (CG(asp_tags)) {
		BEGIN(INITIAL);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		zendlval->value.str.val = yytext; /* no copying - intentional */
		HANDLE_NEWLINES(yytext,yyleng);
		return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
	} else {
		yyless(1);
		return yytext[0];
	}
}
	YY_BREAK
case 117:
YY_RULE_SETUP
{
	register char *s, *t;
	char *end;
	
	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
	zendlval->value.str.len = yyleng-2;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	
	/* convert escape sequences */
	s = t = zendlval->value.str.val;
	end = s+zendlval->value.str.len;
	while (s<end) {
		if (*s=='\\') {
			s++;
			if (s>=end) {
				continue;
			}
			switch(*s) {
				case 'n':
					*t++ = '\n';
					zendlval->value.str.len--;
					break;
				case 'r':
					*t++ = '\r';
					zendlval->value.str.len--;
					break;
				case 't':
					*t++ = '\t';
					zendlval->value.str.len--;
					break;
				case '\\':
				case '$':
				case '"':
					*t++ = *s;
					zendlval->value.str.len--;
					break;
				default:
					/* check for an octal */
					if (ZEND_IS_OCT(*s)) {
						char octal_buf[4] = { 0, 0, 0, 0 };

						octal_buf[0] = *s;
						zendlval->value.str.len--;
						if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
							octal_buf[1] = *(++s);
							zendlval->value.str.len--;
							if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
								octal_buf[2] = *(++s);
								zendlval->value.str.len--;
							}
						}
						*t++ = (char) strtol(octal_buf, NULL, 8);
					} else if (*s=='x' && (s+1)<end && ZEND_IS_HEX(*(s+1))) {
						char hex_buf[3] = { 0, 0, 0};

						zendlval->value.str.len--; /* for the 'x' */

						hex_buf[0] = *(++s);
						zendlval->value.str.len--;
						if ((s+1)<end && ZEND_IS_HEX(*(s+1))) {
							hex_buf[1] = *(++s);
							zendlval->value.str.len--;
						}
						*t++ = (char) strtol(hex_buf, NULL, 16);
					} else {
						*t++ = '\\';
						*t++ = *s;
					}
					break;
			}
			s++;
		} else {
			*t++ = *s++;
		}
	}
	*t = 0;
	
	return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
	register char *s, *t;
	char *end;
	
	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
	zendlval->value.str.len = yyleng-2;
	zendlval->type = IS_STRING;
	HANDLE_NEWLINES(yytext,yyleng);
	
	/* convert escape sequences */
	s = t = zendlval->value.str.val;
	end = s+zendlval->value.str.len;
	while (s<end) {
		if (*s=='\\') {
			s++;
			if (s>=end) {
				continue;
			}
			switch(*s) {
				case '\\':
				case '\'':
					*t++ = *s;
					zendlval->value.str.len--;
					break;
				default:
					*t++ = '\\';
					*t++ = *s;
					break;
			}
			s++;
		} else {
			*t++ = *s++;
		}
	}
	*t = 0;
	
	return T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
	BEGIN(ST_DOUBLE_QUOTES);
	return '\"';
}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
	char *s;
	CG(zend_lineno)++;
	CG(heredoc_len) = yyleng-3-1-(yytext[yyleng-2]=='\r'?1:0);
	s = yytext+3;
	while ((*s == ' ') || (*s == '\t')) {
		s++;
		CG(heredoc_len)--;
	}
	CG(heredoc) = estrndup(s, CG(heredoc_len));
	BEGIN(ST_HEREDOC);
	return T_START_HEREDOC;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
{
	BEGIN(ST_BACKQUOTE);
	return '`';
}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
	BEGIN(ST_SINGLE_QUOTE);
	return '\'';
}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
	int label_len;
	unsigned char unput_semicolon;

	CG(zend_lineno)++;
	if (yytext[yyleng-2]=='\r') {
		label_len = yyleng-2;
	} else {
		label_len = yyleng-1;
	}
	
	if (yytext[label_len-1]==';') {
		label_len--;
		unput_semicolon=1;
	} else{
		unput_semicolon=0;
	}

	if (label_len==CG(heredoc_len) && !memcmp(yytext, CG(heredoc), label_len)) {
		zendlval->value.str.val = estrndup(yytext, yyleng); /* unput destroys yytext */
		zendlval->value.str.len = yyleng;
		if (unput_semicolon) {
			unput(';');
		}
		efree(CG(heredoc));
		CG(heredoc)=NULL;
		CG(heredoc_len)=0;
		BEGIN(ST_IN_SCRIPTING);
		return T_END_HEREDOC;
	} else {
		zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
		zendlval->value.str.len = yyleng;
		zendlval->type = IS_STRING;
		return T_STRING;
	}
}
	YY_BREAK
case 124:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext,yyleng);
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
	HANDLE_NEWLINES(yytext,yyleng);
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) yytext[0];
	if (yyleng == 2) {
		yyless(1);
	}
	return T_CHARACTER;	
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) yytext[0];
	return yytext[0];
}
	YY_BREAK
case 130:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) yytext[0];
	yy_push_state(ST_IN_SCRIPTING);
	yyless(1);
	return T_CURLY_OPEN;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) '\'';
	return T_CHARACTER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
{
	zendlval->value.lval = (long)'\\';
	return T_CHARACTER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) '"';
	return T_CHARACTER;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
	zendlval->value.lval = (long) '`';
	return T_CHARACTER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
{
	zendlval->value.lval = strtol(yytext+1, NULL, 8);
	return T_CHARACTER;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
{
	zendlval->value.lval = strtol (yytext+2, NULL, 16);
	return T_CHARACTER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
{
	switch (yytext[1]) {
		case 'n':
			zendlval->value.lval = (long) '\n';
			break;
		case 't':
			zendlval->value.lval = (long) '\t';
			break;
		case 'r':
			zendlval->value.lval = (long) '\r';
			break;
		case '\\':
			zendlval->value.lval = (long) '\\';
			break;
		case '$':
			zendlval->value.lval = (long) yytext[1];
			break;
		case '{':
			zendlval->value.lval = (long) yytext[1];
			break;
		default:
			zendlval->value.str.val = estrndup(yytext,yyleng);
			zendlval->value.str.len = yyleng;
			zendlval->type = IS_STRING;
			return T_BAD_CHARACTER;
			break;
	}
	return T_CHARACTER;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
	zendlval->value.str.len = yyleng;
	zendlval->type = IS_STRING;
	return T_ENCAPSED_AND_WHITESPACE;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
{
	BEGIN(ST_IN_SCRIPTING);
	return '\"';
}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
	BEGIN(ST_IN_SCRIPTING);
	return '`';
}
	YY_BREAK
case 141:
YY_RULE_SETUP
{
	BEGIN(ST_IN_SCRIPTING);
	return '\'';
}
	YY_BREAK
case YY_STATE_EOF(ST_DOUBLE_QUOTES):
case YY_STATE_EOF(ST_BACKQUOTE):
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ST_IN_SCRIPTING):
case YY_STATE_EOF(ST_LOOKING_FOR_PROPERTY):
{
	return 0;
}
	YY_BREAK
case YY_STATE_EOF(ST_COMMENT):
{
	zend_error(E_COMPILE_WARNING,"Unterminated comment starting line %d", CG(comment_start_line));
	return 0;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
{
	zend_error(E_COMPILE_WARNING,"Unexpected character in input:  '%c' (ASCII=%d) state=%d",yytext[0],yytext[0],YYSTATE);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(ST_SINGLE_QUOTE):
case YY_STATE_EOF(ST_HEREDOC):
case YY_STATE_EOF(ST_LOOKING_FOR_VARNAME):
case YY_STATE_EOF(ST_ONE_LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1335 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1335 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1334);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
